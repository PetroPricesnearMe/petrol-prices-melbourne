name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  CI: false

jobs:
  # Build and validate
  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci || npm install

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENV: production

      - name: Verify build
        run: |
          if [ ! -d ".next" ]; then
            echo "::error::Build output not found"
            exit 1
          fi
          echo "‚úÖ Build verified"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .next/
            !.next/cache
          retention-days: 1

  # Deploy preview to Vercel
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci || npm install

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .next/

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--env NEXT_PUBLIC_ENV=preview'
          scope: ${{ secrets.VERCEL_ORG_ID }}
        continue-on-error: false

      - name: Comment deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const url = '${{ steps.deploy.outputs.url }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ Preview deployed to: ${url}`
            });

      - name: Post deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Preview" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ‚úÖ Deployed" >> $GITHUB_STEP_SUMMARY

  # Health check after deployment
  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: deploy-preview
    timeout-minutes: 5

    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          # Try to get the deployment URL from previous job
          echo "Performing health check..."
          # Add your health check endpoint here when URL is available
          echo "‚úÖ Health check complete"
        continue-on-error: true

  # Notification
  notify-deployment:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-preview, health-check]
    if: always()

    steps:
      - name: Deployment status
        run: |
          if [ "${{ needs.deploy-preview.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi

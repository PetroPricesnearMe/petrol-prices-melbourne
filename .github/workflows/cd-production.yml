name: Production Deployment

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '22'
  CI: false

jobs:
  # Pre-deployment validation
  validate:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate tag format
        if: github.ref_type == 'tag'
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid tag format: $TAG"
            echo "Expected format: v*.*.* (e.g., v1.0.0)"
            exit 1
          fi
          echo "Valid tag: $TAG"

      - name: Check for changelog entry
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "‚ö†Ô∏è Warning: CHANGELOG.md not found"
          fi

  # Run all quality checks
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Run tests
        run: npm run test:ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: .next/
          retention-days: 7

  # Security scan before deployment
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: false

      - name: Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: false
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Deploy to staging first
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gate, security-check]
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for staging
        run: npm run build
        env:
          NEXT_PUBLIC_ENV: staging
          NODE_ENV: production

      - name: Deploy to Vercel Staging
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--env NEXT_PUBLIC_ENV=staging'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Comment deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `üöÄ Staging deployment: ${{ steps.deploy.outputs.url }}`
            })

  # Smoke tests on staging
  smoke-tests:
    name: Smoke Tests (Staging)
    runs-on: ubuntu-latest
    needs: deploy-staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          STAGING_URL="${{ needs.deploy-staging.outputs.url }}"

          echo "Checking health endpoint..."
          response=$(curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL/api/health")

          if [ $response -ne 200 ]; then
            echo "Health check failed with status $response"
            exit 1
          fi

          echo "‚úÖ Health check passed"

      - name: Run critical path tests
        run: |
          STAGING_URL="${{ needs.deploy-staging.outputs.url }}"

          # Test API endpoints
          echo "Testing API endpoints..."
          curl -f "$STAGING_URL/api/v1/stations" || exit 1

          echo "‚úÖ All smoke tests passed"

  # Manual approval gate
  approval:
    name: Approve Production Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, smoke-tests]
    environment:
      name: production-approval

    steps:
      - name: Manual approval
        run: echo "Deployment approved for production"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: approval
    environment:
      name: production
      url: https://your-production-url.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          NEXT_PUBLIC_ENV: production
          NODE_ENV: production

      - name: Deploy to Vercel Production
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --env NEXT_PUBLIC_ENV=production'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Verify deployment
        run: |
          echo "Waiting for deployment to be live..."
          sleep 30

          response=$(curl -s -o /dev/null -w "%{http_code}" "https://your-production-url.com/api/health")

          if [ $response -ne 200 ]; then
            echo "Production health check failed"
            exit 1
          fi

          echo "‚úÖ Production deployment verified"

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref_type == 'tag'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: notes
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          PREV_TAG=$(git describe --abbrev=0 --tags ${TAG}^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${TAG})
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${PREV_TAG}..${TAG})
          fi

          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this release

            ${{ steps.notes.outputs.commits }}

            ## Deployment

            - ‚úÖ Deployed to production
            - üîó URL: https://your-production-url.com

          draft: false
          prerelease: false

  # Post-deployment verification
  post-deployment:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: deploy-production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run production smoke tests
        run: |
          echo "Running production verification..."

          # Test critical endpoints
          curl -f https://your-production-url.com/api/health || exit 1
          curl -f https://your-production-url.com/api/v1/stations || exit 1

          echo "‚úÖ Production verification complete"

      - name: Performance check
        run: |
          echo "Checking production performance..."

          npm install -g @lhci/cli
          lhci autorun --url=https://your-production-url.com || true

  # Rollback plan
  rollback:
    name: Rollback (if needed)
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-production, post-deployment]

    steps:
      - name: Notify rollback needed
        run: |
          echo "‚ö†Ô∏è Deployment failed. Manual rollback may be required."
          echo "Check Vercel dashboard for rollback options."

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment]
    if: always()

    steps:
      - name: Deployment status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ Production deployment successful"
          else
            echo "‚ùå Production deployment failed"
          fi

          # Add Slack/Discord notification here if needed

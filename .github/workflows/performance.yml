name: Performance Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '22'
  CI: false

jobs:
  # Lighthouse Performance Tests
  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci || npm install

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENV: test
          CI: false

      - name: Start server in background
        run: |
          npm start &
          echo $! > server.pid
        env:
          PORT: 3000
          NODE_ENV: production

      - name: Wait for server to be ready
        run: |
          npx wait-on http://localhost:3000 --timeout 60000 || {
            echo "::error::Server failed to start"
            cat server.log 2>/dev/null || echo "No server log found"
            exit 1
          }

      - name: Verify server is responding
        run: |
          curl -f http://localhost:3000 || {
            echo "::error::Server not responding"
            exit 1
          }

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 2
        continue-on-error: true

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: '.lighthouseci/'
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
          fi

  # Bundle Size Analysis
  bundle-size:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci || npm install

      - name: Build with analyzer
        run: npm run build
        env:
          ANALYZE: true
          CI: false
        continue-on-error: false

      - name: Analyze bundle size
        run: |
          echo "## Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -d ".next/static" ]; then
            echo "### Chunk Sizes" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            du -sh .next/static/chunks/* 2>/dev/null | sort -h | tail -20 >> $GITHUB_STEP_SUMMARY || echo "No chunks found"
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

          TOTAL_SIZE=$(du -sh .next 2>/dev/null | cut -f1 || echo "Unknown")
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Build Size:** $TOTAL_SIZE" >> $GITHUB_STEP_SUMMARY

          # Check if build is too large (> 50MB warning)
          SIZE_BYTES=$(du -sb .next 2>/dev/null | cut -f1 || echo "0")
          if [ "$SIZE_BYTES" -gt 52428800 ]; then
            echo "::warning::Build size exceeds 50MB: $TOTAL_SIZE"
          fi

      - name: Upload build stats
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-analysis
          path: |
            .next/analyze/
            bundle-analysis-report.json
          retention-days: 7

  # Performance Regression Check
  performance-regression:
    name: Performance Regression
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci || npm install

      - name: Measure build time
        id: build-time
        run: |
          START_TIME=$(date +%s)
          npm run build
          END_TIME=$(date +%s)
          BUILD_TIME=$((END_TIME - START_TIME))
          echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "Build completed in ${BUILD_TIME}s"
        env:
          CI: false

      - name: Evaluate build performance
        run: |
          BUILD_TIME=${{ steps.build-time.outputs.build_time }}
          BASELINE_TIME=180  # 3 minutes baseline

          echo "## Build Performance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time:** ${BUILD_TIME}s" >> $GITHUB_STEP_SUMMARY
          echo "- **Baseline:** ${BASELINE_TIME}s" >> $GITHUB_STEP_SUMMARY

          if [ $BUILD_TIME -gt $((BASELINE_TIME * 2)) ]; then
            echo "::warning::Build time regression: ${BUILD_TIME}s (baseline: ${BASELINE_TIME}s)"
            echo "- ⚠️ **Status:** Regression detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ **Status:** Performance acceptable" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Measure bundle size
        run: |
          BUNDLE_SIZE=$(du -sb .next/static 2>/dev/null | cut -f1 || echo "0")
          echo "bundle_size=$BUNDLE_SIZE" >> $GITHUB_OUTPUT
          echo "Bundle size: $BUNDLE_SIZE bytes"

      - name: Store metrics
        uses: actions/upload-artifact@v4
        with:
          name: performance-metrics
          path: |
            .next/
          retention-days: 1

  # Web Vitals Check
  web-vitals:
    name: Web Vitals Measurement
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci || npm install

      - name: Build application
        run: npm run build
        env:
          CI: false

      - name: Start server
        run: npm start &
        env:
          PORT: 3000

      - name: Wait for server
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Measure Web Vitals
        run: |
          npx web-vitals-cli http://localhost:3000 --output json > web-vitals.json || true
        continue-on-error: true

      - name: Parse Web Vitals
        run: |
          if [ -f web-vitals.json ]; then
            echo "## Web Vitals" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat web-vitals.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "::warning::Web Vitals measurement failed"
          fi
        continue-on-error: true

      - name: Upload Web Vitals report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: web-vitals-report
          path: web-vitals.json
          retention-days: 7

  # Performance Summary
  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: [lighthouse, bundle-size, performance-regression, web-vitals]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## 📊 Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lighthouse CI | ${{ needs.lighthouse.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Bundle Size | ${{ needs.bundle-size.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Regression | ${{ needs.performance-regression.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Web Vitals | ${{ needs.web-vitals.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Only fail if bundle-size failed (critical)
          if [[ "${{ needs.bundle-size.result }}" == "failure" ]]; then
            echo "::error::Bundle size check failed"
            exit 1
          fi

          echo "✅ Performance checks complete"

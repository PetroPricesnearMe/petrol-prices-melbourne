"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_pages-dir-browser_src_components_StationCards_js",{

/***/ "(pages-dir-browser)/./src/config.js":
/*!***********************!*\
  !*** ./src/config.js ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   baserowAPI: () => (/* binding */ baserowAPI),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// Frontend Configuration\nconst config = {\n    // Baserow API Configuration\n    baserow: {\n        // Public share token (for public grids - no authentication needed)\n        publicToken: process.env.REACT_APP_BASEROW_PUBLIC_TOKEN || 'MIhg-ye0C_K99qvwTzoH6MCvTMAHLbwHR0C4aZKP674',\n        // Database token (for authenticated API access)\n        token: process.env.REACT_APP_BASEROW_TOKEN || 'G2bhijqxqtg0O05dc176fwDpaUPDSIgj',\n        apiUrl: process.env.REACT_APP_BASEROW_API_URL || 'https://api.baserow.io/api',\n        databaseId: 265358,\n        // MCP SSE URL for real-time updates\n        mcpSseUrl: process.env.REACT_APP_BASEROW_SSE_URL || 'https://api.baserow.io/mcp/ta1A1XNRrNHFLKV16tV3I0cSdkIzm9bE/sse'\n    },\n    // Backend API Configuration - ALWAYS use backend as proxy to avoid CORS issues\n    api: {\n        // Default to localhost in development, require explicit URL in production\n        baseUrl: process.env.REACT_APP_API_URL || (window.location.hostname === 'localhost' ? 'http://localhost:3001' : '/api' // Use relative path in production (assumes backend is on same domain)\n        )\n    },\n    // Baserow Table Configuration\n    tables: {\n        petrolStations: {\n            id: 623329,\n            name: 'Petrol Stations'\n        },\n        fuelPrices: {\n            id: 623330,\n            name: 'Fuel Prices'\n        },\n        airtableImport: {\n            id: 623331,\n            name: 'Airtable import report'\n        }\n    },\n    // Google Places API Configuration\n    google: {\n        placesApiKey: process.env.REACT_APP_GOOGLE_PLACES_API_KEY || 'AIzaSyDfEKO1GZBpuUuhhL-gz1miug6jdlT1nFk',\n        placesApiUrl: 'https://places.googleapis.com/v1/places:searchText',\n        mapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || 'AIzaSyDfEKO1GZBpuUuhhL-gz1miug6jdlT1nFk'\n    },\n    // Application Settings\n    app: {\n        name: process.env.REACT_APP_APP_NAME || 'Petrol Prices Near Me',\n        description: process.env.REACT_APP_APP_DESCRIPTION || 'Melbourne Petrol Stations'\n    }\n};\n// Utility functions for Baserow API calls\nconst baserowAPI = {\n    /**\n   * Fetch with exponential backoff retry logic\n   * @param {string} url - URL to fetch\n   * @param {object} options - Fetch options\n   * @param {number} maxRetries - Maximum number of retries\n   * @returns {Promise<Response>} Fetch response\n   */ async fetchWithRetry (url, options = {}, maxRetries = 3) {\n        let lastError;\n        for(let attempt = 0; attempt < maxRetries; attempt++){\n            try {\n                // Add timeout to each attempt\n                const controller = new AbortController();\n                const timeoutId = setTimeout(()=>controller.abort(), 15000); // 15 second timeout\n                const response = await fetch(url, {\n                    ...options,\n                    signal: controller.signal\n                });\n                clearTimeout(timeoutId);\n                // Handle rate limiting (429)\n                if (response.status === 429) {\n                    const retryAfter = response.headers.get('Retry-After');\n                    const waitTime = retryAfter ? parseInt(retryAfter) * 1000 : Math.pow(2, attempt) * 1000;\n                    if (true) {\n                        console.warn(`‚ö†Ô∏è Rate limited (429). Waiting ${waitTime / 1000}s before retry...`);\n                    }\n                    await new Promise((resolve)=>setTimeout(resolve, waitTime));\n                    continue;\n                }\n                // Don't retry client errors (except 429) \n                if (response.status >= 400 && response.status < 500 && response.status !== 429) {\n                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n                }\n                // Success or server error (which we should retry)\n                if (response.ok) {\n                    if (true) {\n                        console.log(`‚úÖ Request successful after ${attempt + 1} attempt(s)`);\n                    }\n                    return response;\n                }\n                // Server error - will retry\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            } catch (error) {\n                lastError = error;\n                // Don't retry on AbortError timeout after max retries\n                if (true) {\n                    if (error.name === 'AbortError') {\n                        console.warn(`‚ö†Ô∏è Request timeout on attempt ${attempt + 1}/${maxRetries}`);\n                    } else {\n                        console.warn(`‚ö†Ô∏è Request failed on attempt ${attempt + 1}/${maxRetries}: ${error.message}`);\n                    }\n                }\n                // If this was the last attempt, throw the error\n                if (attempt === maxRetries - 1) {\n                    if (true) {\n                        console.error(`‚ùå Request failed after ${maxRetries} attempts`);\n                    }\n                    throw lastError;\n                }\n                // Exponential backoff: 1s, 2s, 4s, 8s, etc.\n                const backoffTime = Math.pow(2, attempt) * 1000;\n                if (true) {\n                    console.log(`‚è≥ Waiting ${backoffTime / 1000}s before retry...`);\n                }\n                await new Promise((resolve)=>setTimeout(resolve, backoffTime));\n            }\n        }\n        throw lastError;\n    },\n    // Fetch all stations using the new API endpoints\n    async fetchAllStations () {\n        // In production (no backend), use direct Baserow API\n        if (!config.api.baseUrl || config.api.baseUrl === '/api') {\n            if (true) {\n                console.log('üîÑ Production mode: Using direct Baserow API...');\n            }\n            try {\n                return await this.fetchAllStationsDirect(config.tables.petrolStations.id);\n            } catch (error) {\n                if (true) {\n                    console.error('‚ùå Direct API failed:', error.message);\n                }\n                throw error;\n            }\n        }\n        try {\n            if (true) {\n                console.log(`üîÑ Fetching all stations from: ${config.api.baseUrl}/api/stations/all`);\n            }\n            // Use retry logic for backend API calls\n            const response = await this.fetchWithRetry(`${config.api.baseUrl}/api/stations/all`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            }, 3);\n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.error || 'Failed to fetch stations');\n            }\n            if (true) {\n                console.log(`‚úÖ Successfully fetched ${data.data.length} stations from backend`);\n            }\n            return data.data;\n        } catch (error) {\n            if (true) {\n                console.error('‚ùå Error fetching all stations:', error.message);\n            }\n            // If backend is not available, try direct API call as fallback\n            if (error.message.includes('NetworkError') || error.message.includes('Failed to fetch') || error.name === 'AbortError') {\n                if (true) {\n                    console.log('üîÑ Backend unavailable, trying direct Baserow API as fallback...');\n                }\n                try {\n                    return await this.fetchAllStationsDirect(config.tables.petrolStations.id);\n                } catch (directError) {\n                    if (true) {\n                        console.error('‚ùå Direct API also failed:', directError.message);\n                    }\n                    throw directError;\n                }\n            }\n            throw error;\n        }\n    },\n    // Create a new petrol station\n    async createStation (stationData) {\n        try {\n            if (true) {\n                console.log(`üîÑ Creating new station: ${stationData.stationName}`);\n            }\n            const response = await fetch(`${config.api.baseUrl}/api/stations`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(stationData),\n                signal: AbortSignal.timeout(10000)\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.error || 'Failed to create station');\n            }\n            if (true) {\n                console.log(`‚úÖ Successfully created station: ${stationData.stationName}`);\n            }\n            return data.data;\n        } catch (error) {\n            if (true) {\n                console.error('‚ùå Error creating station:', error.message);\n            }\n            throw error;\n        }\n    },\n    // Update a petrol station\n    async updateStation (stationId, updateData) {\n        try {\n            if (true) {\n                console.log(`üîÑ Updating station ${stationId}`);\n            }\n            const response = await fetch(`${config.api.baseUrl}/api/stations/${stationId}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(updateData),\n                signal: AbortSignal.timeout(10000)\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.error || 'Failed to update station');\n            }\n            if (true) {\n                console.log(`‚úÖ Successfully updated station ${stationId}`);\n            }\n            return data.data;\n        } catch (error) {\n            if (true) {\n                console.error(`‚ùå Error updating station ${stationId}:`, error.message);\n            }\n            throw error;\n        }\n    },\n    // Delete a petrol station\n    async deleteStation (stationId) {\n        try {\n            if (true) {\n                console.log(`üîÑ Deleting station ${stationId}`);\n            }\n            const response = await fetch(`${config.api.baseUrl}/api/stations/${stationId}`, {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                signal: AbortSignal.timeout(10000)\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.error || 'Failed to delete station');\n            }\n            if (true) {\n                console.log(`‚úÖ Successfully deleted station ${stationId}`);\n            }\n            return true;\n        } catch (error) {\n            if (true) {\n                console.error(`‚ùå Error deleting station ${stationId}:`, error.message);\n            }\n            throw error;\n        }\n    },\n    // Get table field metadata\n    async getTableFields (tableId) {\n        try {\n            const response = await fetch(`${config.api.baseUrl}/api/baserow/fields/${tableId}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                signal: AbortSignal.timeout(10000)\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.error || 'Failed to fetch table fields');\n            }\n            if (true) {\n                console.log(`‚úÖ Successfully fetched fields for table ${tableId}`);\n            }\n            return data.data;\n        } catch (error) {\n            if (true) {\n                console.error(`‚ùå Error fetching table fields:`, error.message);\n            }\n            throw error;\n        }\n    },\n    /**\n   * Fetch all stations from Baserow, handling cursor-based pagination.\n   * Note: This method should only be used as a fallback. Prefer using the backend API.\n   * @param {number|string} tableId\n   * @returns {Promise<Array>} All station rows\n   */ async fetchAllStationsDirect (tableId) {\n        if (true) {\n            console.warn('‚ö†Ô∏è Using direct Baserow API access. Consider using backend proxy instead.');\n        }\n        let rows = [];\n        // Use public token if available, otherwise use authenticated token\n        const usePublicToken = config.baserow.publicToken && config.baserow.publicToken !== 'your_public_token_here';\n        let nextUrl = usePublicToken ? `${config.baserow.apiUrl}/database/rows/table/${tableId}/?user_field_names=true&size=100&public_token=${config.baserow.publicToken}` : `${config.baserow.apiUrl}/database/rows/table/${tableId}/?user_field_names=true&size=100`;\n        if (true) {\n            console.log(`üîÑ Fetching directly from Baserow API: ${nextUrl.replace(config.baserow.publicToken, 'PUBLIC_TOKEN')}`);\n            console.log(`üìä Database ID: ${config.baserow.databaseId}`);\n            console.log(`üîë Using ${usePublicToken ? 'public token' : 'auth token'}: ${(usePublicToken ? config.baserow.publicToken : config.baserow.token).substring(0, 8)}...`);\n        }\n        try {\n            while(nextUrl){\n                if (true) {\n                    console.log(`üì° Making request to: ${nextUrl.replace(config.baserow.publicToken, 'PUBLIC_TOKEN')}`);\n                }\n                // Build headers - only add Authorization if using auth token\n                const headers = {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                };\n                if (!usePublicToken) {\n                    headers['Authorization'] = `Token ${config.baserow.token}`;\n                }\n                // Use exponential backoff retry logic\n                const response = await this.fetchWithRetry(nextUrl, {\n                    method: 'GET',\n                    headers,\n                    mode: 'cors',\n                    credentials: 'omit'\n                }, 3);\n                const data = await response.json();\n                if (!Array.isArray(data.results)) {\n                    throw new Error('Unexpected API response structure');\n                }\n                rows.push(...data.results);\n                // Update nextUrl, preserving public_token if present\n                nextUrl = data.next ? usePublicToken ? `${data.next}&public_token=${config.baserow.publicToken}` : data.next : null;\n                if (true) {\n                    console.log(`üìä Progress: ${rows.length} stations fetched so far...`);\n                }\n            }\n            if (true) {\n                console.log(`‚úÖ Successfully fetched ${rows.length} stations from Baserow`);\n            }\n            return rows;\n        } catch (error) {\n            if (true) {\n                console.error('‚ùå Error fetching stations from Baserow:', error.message);\n            }\n            throw error;\n        }\n    },\n    // Test connection to Baserow\n    async testConnection () {\n        try {\n            const response = await fetch(`${config.api.baseUrl}/api/baserow/test`);\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            if (true) {\n                console.error('Error testing connection:', error.message);\n            }\n            throw error;\n        }\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (config);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/config.js\n"));

/***/ })

});
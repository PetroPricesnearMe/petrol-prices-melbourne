"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_pages-dir-node_src_components_StationCards_js";
exports.ids = ["_pages-dir-node_src_components_StationCards_js"];
exports.modules = {

/***/ "(pages-dir-node)/./src/components/StationCards.js":
/*!****************************************!*\
  !*** ./src/components/StationCards.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _services_DataSourceManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/DataSourceManager */ \"(pages-dir-node)/./src/services/DataSourceManager.js\");\n/* harmony import */ var _utils_analytics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/analytics */ \"(pages-dir-node)/./src/utils/analytics.js\");\n\n\n\n\n// CSS imported in pages/_app.js\n/**\n * Station Cards Component\n * Displays Melbourne petrol stations with customizable brand logos\n * Simplified design focusing on Unleaded & Diesel prices\n * \n * @component\n */ const StationCards = ()=>{\n    const [stations, setStations] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [searchTerm, setSearchTerm] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [filterBrand, setFilterBrand] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('all');\n    const [filterRegion, setFilterRegion] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('all');\n    const [filterSuburb, setFilterSuburb] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('all');\n    const [filterFuelType, setFilterFuelType] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('all');\n    const [currentPage, setCurrentPage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const itemsPerPage = 12;\n    // Parse CSV data\n    const parseCSV = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"StationCards.useCallback[parseCSV]\": (text)=>{\n            const lines = text.split('\\n');\n            const headers = lines[0].split(',').map({\n                \"StationCards.useCallback[parseCSV].headers\": (h)=>h.trim().replace(/\"/g, '')\n            }[\"StationCards.useCallback[parseCSV].headers\"]);\n            return lines.slice(1).filter({\n                \"StationCards.useCallback[parseCSV]\": (line)=>line.trim()\n            }[\"StationCards.useCallback[parseCSV]\"]).map({\n                \"StationCards.useCallback[parseCSV]\": (line, index)=>{\n                    const values = line.split(',').map({\n                        \"StationCards.useCallback[parseCSV].values\": (v)=>v.trim().replace(/\"/g, '')\n                    }[\"StationCards.useCallback[parseCSV].values\"]);\n                    const station = {};\n                    headers.forEach({\n                        \"StationCards.useCallback[parseCSV]\": (header, i)=>{\n                            station[header] = values[i] || '';\n                        }\n                    }[\"StationCards.useCallback[parseCSV]\"]);\n                    // Normalize field names and create fuel prices array\n                    const fuelPrices = [];\n                    // Extract fuel prices from various possible columns\n                    Object.keys(station).forEach({\n                        \"StationCards.useCallback[parseCSV]\": (key)=>{\n                            if (key.toLowerCase().includes('price') && station[key]) {\n                                const fuelType = key.toLowerCase().includes('unleaded') ? 'Unleaded' : key.toLowerCase().includes('premium') ? 'Premium' : key.toLowerCase().includes('diesel') ? 'Diesel' : key.toLowerCase().includes('lpg') ? 'LPG' : 'Fuel';\n                                const price = parseFloat(station[key]);\n                                if (!isNaN(price) && price > 0) {\n                                    fuelPrices.push({\n                                        type: fuelType,\n                                        price: price\n                                    });\n                                }\n                            }\n                        }\n                    }[\"StationCards.useCallback[parseCSV]\"]);\n                    return {\n                        id: index + 1,\n                        name: station['Station Name'] || station.name || '',\n                        address: station['Address'] || station.address || '',\n                        city: station['City'] || station.city || '',\n                        postalCode: station['Postal Code'] || station.postalCode || '',\n                        region: station['Region'] || station.region || '',\n                        brand: station['brand'] || station.Brand || '',\n                        latitude: parseFloat(station['Latitude'] || station.lat || 0),\n                        longitude: parseFloat(station['Longitude'] || station.lng || 0),\n                        category: station['Category'] || station.category || '',\n                        locationDetails: station['Location Details'] || station.locationDetails || '',\n                        lastUpdated: station['Last Updated'] || new Date().toISOString(),\n                        fuelPrices: fuelPrices.length > 0 ? fuelPrices : [\n                            {\n                                type: 'Unleaded',\n                                price: 0\n                            },\n                            {\n                                type: 'Premium',\n                                price: 0\n                            },\n                            {\n                                type: 'Diesel',\n                                price: 0\n                            }\n                        ]\n                    };\n                }\n            }[\"StationCards.useCallback[parseCSV]\"]).filter({\n                \"StationCards.useCallback[parseCSV]\": (s)=>s.name\n            }[\"StationCards.useCallback[parseCSV]\"]); // Filter out empty rows\n        }\n    }[\"StationCards.useCallback[parseCSV]\"], []);\n    // Load CSV file from public folder\n    const loadCSV = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"StationCards.useCallback[loadCSV]\": async ()=>{\n            try {\n                const response = await fetch('/export-Petrol-Stations-Grid-view.csv');\n                if (!response.ok) return null;\n                const text = await response.text();\n                return parseCSV(text);\n            } catch (error) {\n                console.log('CSV not available, using Baserow API');\n                return null;\n            }\n        }\n    }[\"StationCards.useCallback[loadCSV]\"], [\n        parseCSV\n    ]);\n    // Load stations from Baserow or CSV\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"StationCards.useEffect\": ()=>{\n            const loadStations = {\n                \"StationCards.useEffect.loadStations\": async ()=>{\n                    try {\n                        setLoading(true);\n                        // Try to load CSV first if available\n                        const csvData = await loadCSV();\n                        if (csvData && csvData.length > 0) {\n                            setStations(csvData);\n                            return;\n                        }\n                        // Fallback to Baserow API\n                        const data = await _services_DataSourceManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].fetchStations();\n                        setStations(data);\n                    } catch (error) {\n                        console.error('Error loading stations:', error);\n                    } finally{\n                        setLoading(false);\n                    }\n                }\n            }[\"StationCards.useEffect.loadStations\"];\n            loadStations();\n        }\n    }[\"StationCards.useEffect\"], [\n        loadCSV\n    ]);\n    // Get unique filter options dynamically from CSV data\n    const brands = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"StationCards.useMemo[brands]\": ()=>{\n            const uniqueBrands = [\n                ...new Set(stations.map({\n                    \"StationCards.useMemo[brands]\": (s)=>s.brand\n                }[\"StationCards.useMemo[brands]\"]).filter(Boolean))\n            ];\n            return [\n                'all',\n                ...uniqueBrands.sort()\n            ];\n        }\n    }[\"StationCards.useMemo[brands]\"], [\n        stations\n    ]);\n    const regions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"StationCards.useMemo[regions]\": ()=>{\n            const uniqueRegions = [\n                ...new Set(stations.map({\n                    \"StationCards.useMemo[regions]\": (s)=>s.region\n                }[\"StationCards.useMemo[regions]\"]).filter(Boolean))\n            ];\n            return [\n                'all',\n                ...uniqueRegions.sort()\n            ];\n        }\n    }[\"StationCards.useMemo[regions]\"], [\n        stations\n    ]);\n    const suburbs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"StationCards.useMemo[suburbs]\": ()=>{\n            const uniqueSuburbs = [\n                ...new Set(stations.map({\n                    \"StationCards.useMemo[suburbs]\": (s)=>s.city\n                }[\"StationCards.useMemo[suburbs]\"]).filter(Boolean))\n            ];\n            return [\n                'all',\n                ...uniqueSuburbs.sort()\n            ];\n        }\n    }[\"StationCards.useMemo[suburbs]\"], [\n        stations\n    ]);\n    const fuelTypes = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"StationCards.useMemo[fuelTypes]\": ()=>{\n            const allFuelTypes = stations.flatMap({\n                \"StationCards.useMemo[fuelTypes].allFuelTypes\": (s)=>{\n                    // Ensure fuelPrices is an array and contains objects with type property\n                    if (!Array.isArray(s.fuelPrices)) return [];\n                    return s.fuelPrices.filter({\n                        \"StationCards.useMemo[fuelTypes].allFuelTypes\": (f)=>f && typeof f === 'object' && f.type\n                    }[\"StationCards.useMemo[fuelTypes].allFuelTypes\"]).map({\n                        \"StationCards.useMemo[fuelTypes].allFuelTypes\": (f)=>f.type\n                    }[\"StationCards.useMemo[fuelTypes].allFuelTypes\"]);\n                }\n            }[\"StationCards.useMemo[fuelTypes].allFuelTypes\"]);\n            const uniqueFuelTypes = [\n                ...new Set(allFuelTypes.filter(Boolean))\n            ];\n            return [\n                'all',\n                ...uniqueFuelTypes.sort()\n            ];\n        }\n    }[\"StationCards.useMemo[fuelTypes]\"], [\n        stations\n    ]);\n    // Filter and search stations\n    const filteredStations = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"StationCards.useMemo[filteredStations]\": ()=>{\n            let filtered = [\n                ...stations\n            ];\n            // Search filter\n            if (searchTerm) {\n                const search = searchTerm.toLowerCase();\n                filtered = filtered.filter({\n                    \"StationCards.useMemo[filteredStations]\": (station)=>station.name?.toLowerCase().includes(search) || station.address?.toLowerCase().includes(search) || station.city?.toLowerCase().includes(search) || station.brand?.toLowerCase().includes(search) || station.postalCode?.includes(search)\n                }[\"StationCards.useMemo[filteredStations]\"]);\n                (0,_utils_analytics__WEBPACK_IMPORTED_MODULE_3__.trackSearch)(searchTerm, filtered.length);\n            }\n            // Brand filter\n            if (filterBrand !== 'all') {\n                filtered = filtered.filter({\n                    \"StationCards.useMemo[filteredStations]\": (s)=>s.brand === filterBrand\n                }[\"StationCards.useMemo[filteredStations]\"]);\n                (0,_utils_analytics__WEBPACK_IMPORTED_MODULE_3__.trackFilter)('brand', filterBrand);\n            }\n            // Region filter\n            if (filterRegion !== 'all') {\n                filtered = filtered.filter({\n                    \"StationCards.useMemo[filteredStations]\": (s)=>s.region === filterRegion\n                }[\"StationCards.useMemo[filteredStations]\"]);\n                (0,_utils_analytics__WEBPACK_IMPORTED_MODULE_3__.trackFilter)('region', filterRegion);\n            }\n            // Suburb filter\n            if (filterSuburb !== 'all') {\n                filtered = filtered.filter({\n                    \"StationCards.useMemo[filteredStations]\": (s)=>s.city === filterSuburb\n                }[\"StationCards.useMemo[filteredStations]\"]);\n                (0,_utils_analytics__WEBPACK_IMPORTED_MODULE_3__.trackFilter)('suburb', filterSuburb);\n            }\n            // Fuel type filter\n            if (filterFuelType !== 'all') {\n                filtered = filtered.filter({\n                    \"StationCards.useMemo[filteredStations]\": (s)=>Array.isArray(s.fuelPrices) && s.fuelPrices.some({\n                            \"StationCards.useMemo[filteredStations]\": (fuel)=>fuel && fuel.type === filterFuelType\n                        }[\"StationCards.useMemo[filteredStations]\"])\n                }[\"StationCards.useMemo[filteredStations]\"]);\n                (0,_utils_analytics__WEBPACK_IMPORTED_MODULE_3__.trackFilter)('fuelType', filterFuelType);\n            }\n            return filtered;\n        }\n    }[\"StationCards.useMemo[filteredStations]\"], [\n        stations,\n        searchTerm,\n        filterBrand,\n        filterRegion,\n        filterSuburb,\n        filterFuelType\n    ]);\n    // Pagination\n    const totalPages = Math.ceil(filteredStations.length / itemsPerPage);\n    const paginatedStations = filteredStations.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);\n    // Brand image mapping\n    const BRAND_IMAGES = {\n        'shell': '/images/brands/shell.svg',\n        'bp': '/images/brands/bp.svg',\n        '7-eleven': '/images/brands/7-eleven.svg',\n        'seven eleven': '/images/brands/7-eleven.svg',\n        'mobil': '/images/brands/mobil.svg',\n        'coles express': '/images/brands/coles-express.svg',\n        'united': '/images/brands/united.svg',\n        'liberty': '/images/brands/liberty.svg',\n        'apco': '/images/brands/apco.svg',\n        'caltex': '/images/brands/caltex.svg',\n        'ampol': '/images/brands/caltex.svg',\n        'default': '/images/brands/default-logo.svg'\n    };\n    // Get brand logo\n    const getBrandLogo = (brand)=>{\n        if (!brand) return BRAND_IMAGES.default;\n        const brandLower = (typeof brand === 'string' ? brand : '').toLowerCase();\n        // Check for exact matches first\n        if (BRAND_IMAGES[brandLower]) return BRAND_IMAGES[brandLower];\n        // Check for partial matches\n        if (brandLower.includes('shell')) return BRAND_IMAGES.shell;\n        if (brandLower.includes('bp')) return BRAND_IMAGES.bp;\n        if (brandLower.includes('7') || brandLower.includes('seven')) return BRAND_IMAGES['7-eleven'];\n        if (brandLower.includes('mobil')) return BRAND_IMAGES.mobil;\n        if (brandLower.includes('coles')) return BRAND_IMAGES['coles express'];\n        if (brandLower.includes('united')) return BRAND_IMAGES.united;\n        if (brandLower.includes('liberty')) return BRAND_IMAGES.liberty;\n        if (brandLower.includes('apco')) return BRAND_IMAGES.apco;\n        if (brandLower.includes('caltex') || brandLower.includes('ampol')) return BRAND_IMAGES.caltex;\n        return BRAND_IMAGES.default;\n    };\n    // Format fuel type for display\n    const getFuelIcon = (type)=>{\n        const icons = {\n            'Unleaded': 'U',\n            'Premium': 'P',\n            'Diesel': 'D',\n            'LPG': 'L'\n        };\n        return icons[type] || 'F';\n    };\n    // Format price\n    const formatPrice = (price)=>{\n        if (!price || price === 0) return 'N/A';\n        return `$${price.toFixed(2)}`;\n    };\n    // Format last updated date\n    const formatLastUpdated = (dateString)=>{\n        try {\n            const date = new Date(dateString);\n            return date.toLocaleDateString('en-AU', {\n                day: '2-digit',\n                month: '2-digit',\n                year: 'numeric'\n            });\n        } catch  {\n            return 'Unknown';\n        }\n    };\n    if (loading) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"station-cards-loading\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"loading-spinner\"\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                    lineNumber: 279,\n                    columnNumber: 9\n                }, undefined),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    children: \"Loading stations...\"\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                    lineNumber: 280,\n                    columnNumber: 9\n                }, undefined)\n            ]\n        }, void 0, true, {\n            fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n            lineNumber: 278,\n            columnNumber: 7\n        }, undefined);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"station-cards-container\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"cards-header\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        children: \"Melbourne Petrol Stations\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                        lineNumber: 289,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"cards-subtitle\",\n                        children: [\n                            \"Find the best fuel prices near you • \",\n                            filteredStations.length,\n                            \" stations available\"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                        lineNumber: 290,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                lineNumber: 288,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"cards-filters\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"filter-group\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                htmlFor: \"search\",\n                                children: \"\\uD83D\\uDD0D Search Stations\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                lineNumber: 298,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                id: \"search\",\n                                name: \"search\",\n                                type: \"search\",\n                                placeholder: \"Search by name, address, suburb...\",\n                                value: searchTerm,\n                                onChange: (e)=>setSearchTerm(e.target.value),\n                                className: \"search-input\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                lineNumber: 299,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                        lineNumber: 297,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"filter-group\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                htmlFor: \"brand-filter\",\n                                children: \"\\uD83C\\uDFEA Brand\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                lineNumber: 311,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                id: \"brand-filter\",\n                                name: \"brand-filter\",\n                                value: filterBrand,\n                                onChange: (e)=>setFilterBrand(e.target.value),\n                                className: \"filter-select\",\n                                children: brands.map((brand)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: brand,\n                                        children: brand === 'all' ? 'All Brands' : brand\n                                    }, brand, false, {\n                                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                        lineNumber: 320,\n                                        columnNumber: 15\n                                    }, undefined))\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                lineNumber: 312,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                        lineNumber: 310,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"filter-group\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                htmlFor: \"suburb-filter\",\n                                children: \"\\uD83C\\uDFD8️ Suburb\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                lineNumber: 328,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                id: \"suburb-filter\",\n                                name: \"suburb-filter\",\n                                value: filterSuburb,\n                                onChange: (e)=>setFilterSuburb(e.target.value),\n                                className: \"filter-select\",\n                                children: suburbs.map((suburb)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: suburb,\n                                        children: suburb === 'all' ? 'All Suburbs' : suburb\n                                    }, suburb, false, {\n                                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                        lineNumber: 337,\n                                        columnNumber: 15\n                                    }, undefined))\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                lineNumber: 329,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                        lineNumber: 327,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"filter-group\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                htmlFor: \"fuel-filter\",\n                                children: \"⛽ Fuel Type\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                lineNumber: 345,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                id: \"fuel-filter\",\n                                name: \"fuel-filter\",\n                                value: filterFuelType,\n                                onChange: (e)=>setFilterFuelType(e.target.value),\n                                className: \"filter-select\",\n                                children: fuelTypes.map((fuelType)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: fuelType,\n                                        children: fuelType === 'all' ? 'All Fuel Types' : fuelType\n                                    }, fuelType, false, {\n                                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                        lineNumber: 354,\n                                        columnNumber: 15\n                                    }, undefined))\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                lineNumber: 346,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                        lineNumber: 344,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"filter-group\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                htmlFor: \"region-filter\",\n                                children: \"\\uD83D\\uDCCD Region\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                lineNumber: 362,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                id: \"region-filter\",\n                                name: \"region-filter\",\n                                value: filterRegion,\n                                onChange: (e)=>setFilterRegion(e.target.value),\n                                className: \"filter-select\",\n                                children: regions.map((region)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: region,\n                                        children: region === 'all' ? 'All Regions' : region\n                                    }, region, false, {\n                                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                        lineNumber: 371,\n                                        columnNumber: 15\n                                    }, undefined))\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                lineNumber: 363,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                        lineNumber: 361,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                lineNumber: 296,\n                columnNumber: 7\n            }, undefined),\n            paginatedStations.length > 0 ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"cards-grid\",\n                children: paginatedStations.map((station)=>{\n                    // Filter to show only Unleaded and Diesel prices\n                    const unleadedPrice = Array.isArray(station.fuelPrices) ? station.fuelPrices.find((f)=>f && f.type && f.type.toLowerCase().includes('unleaded')) : null;\n                    const dieselPrice = Array.isArray(station.fuelPrices) ? station.fuelPrices.find((f)=>f && f.type && f.type.toLowerCase().includes('diesel')) : null;\n                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"station-card\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"card-header\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                        src: getBrandLogo(station.brand),\n                                        alt: `${station.brand || 'Station'} logo`,\n                                        className: \"brand-logo\",\n                                        onError: (e)=>{\n                                            e.target.src = '/images/brands/default-logo.svg';\n                                        }\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                        lineNumber: 396,\n                                        columnNumber: 19\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"brand-badge\",\n                                        children: station.brand || 'Independent'\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                        lineNumber: 404,\n                                        columnNumber: 19\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                lineNumber: 395,\n                                columnNumber: 17\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"card-content\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                        className: \"station-name\",\n                                        children: station.name\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                        lineNumber: 409,\n                                        columnNumber: 19\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"station-address\",\n                                        children: [\n                                            station.address && `${station.address}, `,\n                                            station.city && `${station.city} `,\n                                            station.postalCode && station.postalCode\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                        lineNumber: 410,\n                                        columnNumber: 19\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"fuel-prices\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: `fuel-price-item ${unleadedPrice ? 'unleaded' : ''}`,\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        className: \"fuel-type\",\n                                                        children: [\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"fuel-icon unleaded\",\n                                                                children: \"U\"\n                                                            }, void 0, false, {\n                                                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                                                lineNumber: 421,\n                                                                columnNumber: 25\n                                                            }, undefined),\n                                                            \"Unleaded\"\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                                        lineNumber: 420,\n                                                        columnNumber: 23\n                                                    }, undefined),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        className: \"price\",\n                                                        children: unleadedPrice && unleadedPrice.price ? formatPrice(unleadedPrice.price) : 'N/A'\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                                        lineNumber: 424,\n                                                        columnNumber: 23\n                                                    }, undefined)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                                lineNumber: 419,\n                                                columnNumber: 21\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: `fuel-price-item ${dieselPrice ? 'diesel' : ''}`,\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        className: \"fuel-type\",\n                                                        children: [\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"fuel-icon diesel\",\n                                                                children: \"D\"\n                                                            }, void 0, false, {\n                                                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                                                lineNumber: 434,\n                                                                columnNumber: 25\n                                                            }, undefined),\n                                                            \"Diesel\"\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                                        lineNumber: 433,\n                                                        columnNumber: 23\n                                                    }, undefined),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        className: \"price\",\n                                                        children: dieselPrice && dieselPrice.price ? formatPrice(dieselPrice.price) : 'N/A'\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                                        lineNumber: 437,\n                                                        columnNumber: 23\n                                                    }, undefined)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                                lineNumber: 432,\n                                                columnNumber: 21\n                                            }, undefined)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                        lineNumber: 417,\n                                        columnNumber: 19\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"card-actions\",\n                                        children: [\n                                            station.latitude && station.longitude ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                                href: `https://www.google.com/maps/dir/?api=1&destination=${station.latitude},${station.longitude}`,\n                                                target: \"_blank\",\n                                                rel: \"noopener noreferrer\",\n                                                className: \"action-btn\",\n                                                children: \"\\uD83E\\uDDED Directions\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                                lineNumber: 448,\n                                                columnNumber: 23\n                                            }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                className: \"action-btn\",\n                                                disabled: true,\n                                                children: \"\\uD83D\\uDCCD No Location\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                                lineNumber: 457,\n                                                columnNumber: 23\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                className: \"action-btn secondary\",\n                                                children: \"ℹ️ More Info\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                                lineNumber: 461,\n                                                columnNumber: 21\n                                            }, undefined)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                        lineNumber: 446,\n                                        columnNumber: 19\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                                lineNumber: 408,\n                                columnNumber: 17\n                            }, undefined)\n                        ]\n                    }, station.id, true, {\n                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                        lineNumber: 393,\n                        columnNumber: 15\n                    }, undefined);\n                })\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                lineNumber: 381,\n                columnNumber: 9\n            }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"no-results\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        children: \"No stations found\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                        lineNumber: 472,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        children: \"Try adjusting your search criteria or filters\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                        lineNumber: 473,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                lineNumber: 471,\n                columnNumber: 9\n            }, undefined),\n            totalPages > 1 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"cards-pagination\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: ()=>setCurrentPage((p)=>Math.max(1, p - 1)),\n                        disabled: currentPage === 1,\n                        className: \"page-btn\",\n                        children: \"← Previous\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                        lineNumber: 480,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        className: \"page-info\",\n                        children: [\n                            \"Page \",\n                            currentPage,\n                            \" of \",\n                            totalPages\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                        lineNumber: 488,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: ()=>setCurrentPage((p)=>Math.min(totalPages, p + 1)),\n                        disabled: currentPage === totalPages,\n                        className: \"page-btn\",\n                        children: \"Next →\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                        lineNumber: 492,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                lineNumber: 479,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"cards-footer\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    children: [\n                        \"Showing \",\n                        (currentPage - 1) * itemsPerPage + 1,\n                        \"-\",\n                        Math.min(currentPage * itemsPerPage, filteredStations.length),\n                        \" of \",\n                        filteredStations.length,\n                        \" stations\",\n                        (searchTerm || filterBrand !== 'all' || filterRegion !== 'all' || filterSuburb !== 'all' || filterFuelType !== 'all') && ` (filtered from ${stations.length} total)`\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                    lineNumber: 504,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n                lineNumber: 503,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\zenbo\\\\Desktop\\\\PPNM\\\\src\\\\components\\\\StationCards.js\",\n        lineNumber: 286,\n        columnNumber: 5\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StationCards);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/components/StationCards.js\n");

/***/ }),

/***/ "(pages-dir-node)/./src/config.js":
/*!***********************!*\
  !*** ./src/config.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   baserowAPI: () => (/* binding */ baserowAPI),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Frontend Configuration\nconst config = {\n    // Baserow API Configuration\n    baserow: {\n        // Public share token (for public grids - no authentication needed)\n        publicToken: process.env.REACT_APP_BASEROW_PUBLIC_TOKEN || 'MIhg-ye0C_K99qvwTzoH6MCvTMAHLbwHR0C4aZKP674',\n        // Database token (for authenticated API access)\n        token: process.env.REACT_APP_BASEROW_TOKEN || 'G2bhijqxqtg0O05dc176fwDpaUPDSIgj',\n        apiUrl: process.env.REACT_APP_BASEROW_API_URL || 'https://api.baserow.io/api',\n        databaseId: 265358,\n        // MCP SSE URL for real-time updates\n        mcpSseUrl: process.env.REACT_APP_BASEROW_SSE_URL || 'https://api.baserow.io/mcp/ta1A1XNRrNHFLKV16tV3I0cSdkIzm9bE/sse'\n    },\n    // Backend API Configuration - ALWAYS use backend as proxy to avoid CORS issues\n    api: {\n        // Default to localhost in development, require explicit URL in production\n        baseUrl: process.env.REACT_APP_API_URL || (window.location.hostname === 'localhost' ? 'http://localhost:3001' : '/api' // Use relative path in production (assumes backend is on same domain)\n        )\n    },\n    // Baserow Table Configuration\n    tables: {\n        petrolStations: {\n            id: 623329,\n            name: 'Petrol Stations'\n        },\n        fuelPrices: {\n            id: 623330,\n            name: 'Fuel Prices'\n        },\n        airtableImport: {\n            id: 623331,\n            name: 'Airtable import report'\n        }\n    },\n    // Google Places API Configuration\n    google: {\n        placesApiKey: process.env.REACT_APP_GOOGLE_PLACES_API_KEY || 'AIzaSyDfEKO1GZBpuUuhhL-gz1miug6jdlT1nFk',\n        placesApiUrl: 'https://places.googleapis.com/v1/places:searchText',\n        mapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || 'AIzaSyDfEKO1GZBpuUuhhL-gz1miug6jdlT1nFk'\n    },\n    // Application Settings\n    app: {\n        name: process.env.REACT_APP_APP_NAME || 'Petrol Prices Near Me',\n        description: process.env.REACT_APP_APP_DESCRIPTION || 'Melbourne Petrol Stations'\n    }\n};\n// Utility functions for Baserow API calls\nconst baserowAPI = {\n    /**\n   * Fetch with exponential backoff retry logic\n   * @param {string} url - URL to fetch\n   * @param {object} options - Fetch options\n   * @param {number} maxRetries - Maximum number of retries\n   * @returns {Promise<Response>} Fetch response\n   */ async fetchWithRetry (url, options = {}, maxRetries = 3) {\n        let lastError;\n        for(let attempt = 0; attempt < maxRetries; attempt++){\n            try {\n                // Add timeout to each attempt\n                const controller = new AbortController();\n                const timeoutId = setTimeout(()=>controller.abort(), 15000); // 15 second timeout\n                const response = await fetch(url, {\n                    ...options,\n                    signal: controller.signal\n                });\n                clearTimeout(timeoutId);\n                // Handle rate limiting (429)\n                if (response.status === 429) {\n                    const retryAfter = response.headers.get('Retry-After');\n                    const waitTime = retryAfter ? parseInt(retryAfter) * 1000 : Math.pow(2, attempt) * 1000;\n                    if (true) {\n                        console.warn(`⚠️ Rate limited (429). Waiting ${waitTime / 1000}s before retry...`);\n                    }\n                    await new Promise((resolve)=>setTimeout(resolve, waitTime));\n                    continue;\n                }\n                // Don't retry client errors (except 429) \n                if (response.status >= 400 && response.status < 500 && response.status !== 429) {\n                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n                }\n                // Success or server error (which we should retry)\n                if (response.ok) {\n                    if (true) {\n                        console.log(`✅ Request successful after ${attempt + 1} attempt(s)`);\n                    }\n                    return response;\n                }\n                // Server error - will retry\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            } catch (error) {\n                lastError = error;\n                // Don't retry on AbortError timeout after max retries\n                if (true) {\n                    if (error.name === 'AbortError') {\n                        console.warn(`⚠️ Request timeout on attempt ${attempt + 1}/${maxRetries}`);\n                    } else {\n                        console.warn(`⚠️ Request failed on attempt ${attempt + 1}/${maxRetries}: ${error.message}`);\n                    }\n                }\n                // If this was the last attempt, throw the error\n                if (attempt === maxRetries - 1) {\n                    if (true) {\n                        console.error(`❌ Request failed after ${maxRetries} attempts`);\n                    }\n                    throw lastError;\n                }\n                // Exponential backoff: 1s, 2s, 4s, 8s, etc.\n                const backoffTime = Math.pow(2, attempt) * 1000;\n                if (true) {\n                    console.log(`⏳ Waiting ${backoffTime / 1000}s before retry...`);\n                }\n                await new Promise((resolve)=>setTimeout(resolve, backoffTime));\n            }\n        }\n        throw lastError;\n    },\n    // Fetch all stations using the new API endpoints\n    async fetchAllStations () {\n        // In production (no backend), use direct Baserow API\n        if (!config.api.baseUrl || config.api.baseUrl === '/api') {\n            if (true) {\n                console.log('🔄 Production mode: Using direct Baserow API...');\n            }\n            try {\n                return await this.fetchAllStationsDirect(config.tables.petrolStations.id);\n            } catch (error) {\n                if (true) {\n                    console.error('❌ Direct API failed:', error.message);\n                }\n                throw error;\n            }\n        }\n        try {\n            if (true) {\n                console.log(`🔄 Fetching all stations from: ${config.api.baseUrl}/api/stations/all`);\n            }\n            // Use retry logic for backend API calls\n            const response = await this.fetchWithRetry(`${config.api.baseUrl}/api/stations/all`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            }, 3);\n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.error || 'Failed to fetch stations');\n            }\n            if (true) {\n                console.log(`✅ Successfully fetched ${data.data.length} stations from backend`);\n            }\n            return data.data;\n        } catch (error) {\n            if (true) {\n                console.error('❌ Error fetching all stations:', error.message);\n            }\n            // If backend is not available, try direct API call as fallback\n            if (error.message.includes('NetworkError') || error.message.includes('Failed to fetch') || error.name === 'AbortError') {\n                if (true) {\n                    console.log('🔄 Backend unavailable, trying direct Baserow API as fallback...');\n                }\n                try {\n                    return await this.fetchAllStationsDirect(config.tables.petrolStations.id);\n                } catch (directError) {\n                    if (true) {\n                        console.error('❌ Direct API also failed:', directError.message);\n                    }\n                    throw directError;\n                }\n            }\n            throw error;\n        }\n    },\n    // Create a new petrol station\n    async createStation (stationData) {\n        try {\n            if (true) {\n                console.log(`🔄 Creating new station: ${stationData.stationName}`);\n            }\n            const response = await fetch(`${config.api.baseUrl}/api/stations`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(stationData),\n                signal: AbortSignal.timeout(10000)\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.error || 'Failed to create station');\n            }\n            if (true) {\n                console.log(`✅ Successfully created station: ${stationData.stationName}`);\n            }\n            return data.data;\n        } catch (error) {\n            if (true) {\n                console.error('❌ Error creating station:', error.message);\n            }\n            throw error;\n        }\n    },\n    // Update a petrol station\n    async updateStation (stationId, updateData) {\n        try {\n            if (true) {\n                console.log(`🔄 Updating station ${stationId}`);\n            }\n            const response = await fetch(`${config.api.baseUrl}/api/stations/${stationId}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(updateData),\n                signal: AbortSignal.timeout(10000)\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.error || 'Failed to update station');\n            }\n            if (true) {\n                console.log(`✅ Successfully updated station ${stationId}`);\n            }\n            return data.data;\n        } catch (error) {\n            if (true) {\n                console.error(`❌ Error updating station ${stationId}:`, error.message);\n            }\n            throw error;\n        }\n    },\n    // Delete a petrol station\n    async deleteStation (stationId) {\n        try {\n            if (true) {\n                console.log(`🔄 Deleting station ${stationId}`);\n            }\n            const response = await fetch(`${config.api.baseUrl}/api/stations/${stationId}`, {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                signal: AbortSignal.timeout(10000)\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.error || 'Failed to delete station');\n            }\n            if (true) {\n                console.log(`✅ Successfully deleted station ${stationId}`);\n            }\n            return true;\n        } catch (error) {\n            if (true) {\n                console.error(`❌ Error deleting station ${stationId}:`, error.message);\n            }\n            throw error;\n        }\n    },\n    // Get table field metadata\n    async getTableFields (tableId) {\n        try {\n            const response = await fetch(`${config.api.baseUrl}/api/baserow/fields/${tableId}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                signal: AbortSignal.timeout(10000)\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.error || 'Failed to fetch table fields');\n            }\n            if (true) {\n                console.log(`✅ Successfully fetched fields for table ${tableId}`);\n            }\n            return data.data;\n        } catch (error) {\n            if (true) {\n                console.error(`❌ Error fetching table fields:`, error.message);\n            }\n            throw error;\n        }\n    },\n    /**\n   * Fetch all stations from Baserow, handling cursor-based pagination.\n   * Note: This method should only be used as a fallback. Prefer using the backend API.\n   * @param {number|string} tableId\n   * @returns {Promise<Array>} All station rows\n   */ async fetchAllStationsDirect (tableId) {\n        if (true) {\n            console.warn('⚠️ Using direct Baserow API access. Consider using backend proxy instead.');\n        }\n        let rows = [];\n        // Use public token if available, otherwise use authenticated token\n        const usePublicToken = config.baserow.publicToken && config.baserow.publicToken !== 'your_public_token_here';\n        let nextUrl = usePublicToken ? `${config.baserow.apiUrl}/database/rows/table/${tableId}/?user_field_names=true&size=100&public_token=${config.baserow.publicToken}` : `${config.baserow.apiUrl}/database/rows/table/${tableId}/?user_field_names=true&size=100`;\n        if (true) {\n            console.log(`🔄 Fetching directly from Baserow API: ${nextUrl.replace(config.baserow.publicToken, 'PUBLIC_TOKEN')}`);\n            console.log(`📊 Database ID: ${config.baserow.databaseId}`);\n            console.log(`🔑 Using ${usePublicToken ? 'public token' : 'auth token'}: ${(usePublicToken ? config.baserow.publicToken : config.baserow.token).substring(0, 8)}...`);\n        }\n        try {\n            while(nextUrl){\n                if (true) {\n                    console.log(`📡 Making request to: ${nextUrl.replace(config.baserow.publicToken, 'PUBLIC_TOKEN')}`);\n                }\n                // Build headers - only add Authorization if using auth token\n                const headers = {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                };\n                if (!usePublicToken) {\n                    headers['Authorization'] = `Token ${config.baserow.token}`;\n                }\n                // Use exponential backoff retry logic\n                const response = await this.fetchWithRetry(nextUrl, {\n                    method: 'GET',\n                    headers,\n                    mode: 'cors',\n                    credentials: 'omit'\n                }, 3);\n                const data = await response.json();\n                if (!Array.isArray(data.results)) {\n                    throw new Error('Unexpected API response structure');\n                }\n                rows.push(...data.results);\n                // Update nextUrl, preserving public_token if present\n                nextUrl = data.next ? usePublicToken ? `${data.next}&public_token=${config.baserow.publicToken}` : data.next : null;\n                if (true) {\n                    console.log(`📊 Progress: ${rows.length} stations fetched so far...`);\n                }\n            }\n            if (true) {\n                console.log(`✅ Successfully fetched ${rows.length} stations from Baserow`);\n            }\n            return rows;\n        } catch (error) {\n            if (true) {\n                console.error('❌ Error fetching stations from Baserow:', error.message);\n            }\n            throw error;\n        }\n    },\n    // Test connection to Baserow\n    async testConnection () {\n        try {\n            const response = await fetch(`${config.api.baseUrl}/api/baserow/test`);\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            if (true) {\n                console.error('Error testing connection:', error.message);\n            }\n            throw error;\n        }\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (config);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/config.js\n");

/***/ }),

/***/ "(pages-dir-node)/./src/services/DataSourceManager.js":
/*!*******************************************!*\
  !*** ./src/services/DataSourceManager.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ \"(pages-dir-node)/./src/config.js\");\n/* harmony import */ var _utils_validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/validation */ \"(pages-dir-node)/./src/utils/validation.js\");\n/* harmony import */ var _LocalDataService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LocalDataService */ \"(pages-dir-node)/./src/services/LocalDataService.js\");\n/**\n * Centralized Data Source Manager\n * \n * This service manages all data sources and ensures only one source is active at a time.\n * It prevents conflicts between different data sources and provides a unified interface.\n */ \n\n\n// validateStations currently unused - commented out to fix ESLint warning\nclass DataSourceManager {\n    constructor(){\n        this.activeSource = 'local'; // Default to local GeoJSON/CSV data\n        this.dataCache = new Map();\n        this.isLoading = false;\n        this.lastFetchTime = null;\n        this.cacheTimeout = 5 * 60 * 1000; // 5 minutes cache\n    }\n    /**\n   * Get the currently active data source\n   * @returns {string} Active data source name\n   */ getActiveSource() {\n        return this.activeSource;\n    }\n    /**\n   * Set the active data source\n   * @param {string} source - Data source name ('baserow', 'airtable', 'mock')\n   */ setActiveSource(source) {\n        console.log(`🔄 Switching data source from ${this.activeSource} to ${source}`);\n        this.activeSource = source;\n        this.clearCache(); // Clear cache when switching sources\n    }\n    /**\n   * Clear all cached data\n   */ clearCache() {\n        console.log('🗑️ Clearing data cache');\n        this.dataCache.clear();\n        this.lastFetchTime = null;\n    }\n    /**\n   * Check if cached data is still valid\n   * @returns {boolean} True if cache is valid\n   */ isCacheValid() {\n        if (!this.lastFetchTime) return false;\n        return Date.now() - this.lastFetchTime < this.cacheTimeout;\n    }\n    /**\n   * Validate station data structure\n   * Enhanced with comprehensive field mapping for Baserow compatibility\n   * @param {Object} station - Station data to validate\n   * @param {number} index - Station index for logging\n   * @returns {Object} Validation result\n   */ validateStationData(station, index) {\n        if (!station || typeof station !== 'object') {\n            return {\n                valid: false,\n                reason: 'Invalid station object'\n            };\n        }\n        // Extract coordinates with comprehensive fallback options\n        // Priority: Standard names -> Baserow field IDs -> Common alternatives\n        // This handles both human-readable field names and Baserow's auto-generated field IDs\n        let lat = station.Latitude || station.latitude || station.lat || station.Y || station.field_5072136 || // Baserow field ID format\n        station.field5072136 || null;\n        let lng = station.Longitude || station.longitude || station.lng || station.X || station.field_5072137 || // Baserow field ID format\n        station.field5072137 || null;\n        // Convert to numbers if they're strings\n        if (lat !== null && typeof lat === 'string') lat = parseFloat(lat);\n        if (lng !== null && typeof lng === 'string') lng = parseFloat(lng);\n        // Enhanced coordinate validation with detailed logging\n        if (lat === null || lng === null || isNaN(lat) || isNaN(lng)) {\n            console.warn(`⚠️ Station ${index + 1} has invalid coordinates:`, {\n                lat,\n                lng,\n                stationId: station.id,\n                stationName: station['Station Name'] || station.station_name || station.name,\n                availableFields: Object.keys(station).filter((k)=>k.toLowerCase().includes('lat') || k.toLowerCase().includes('long') || k.toLowerCase().includes('x') || k.toLowerCase().includes('y'))\n            });\n            return {\n                valid: false,\n                reason: 'Invalid coordinates'\n            };\n        }\n        // Validate coordinate ranges for Australia\n        if (lat < -45.0 || lat > -10.0 || lng < 110.0 || lng > 155.0) {\n            console.warn(`⚠️ Station ${index + 1} outside Australia:`, {\n                lat,\n                lng,\n                name: station['Station Name'] || station.station_name || station.name\n            });\n            return {\n                valid: false,\n                reason: 'Coordinates outside Australia'\n            };\n        }\n        return {\n            valid: true,\n            lat,\n            lng\n        };\n    }\n    /**\n   * Transform station data with consistent field mapping\n   * Uses comprehensive validation and enhanced coordinate extraction\n   * @param {Object} station - Raw station data\n   * @param {number} index - Station index\n   * @returns {Object|null} Transformed station data or null if invalid\n   */ transformStationData(station, index) {\n        // First validate coordinates using our enhanced validation\n        const validation = this.validateStationData(station, index);\n        if (!validation.valid) {\n            return null;\n        }\n        // Use the comprehensive validation and transformation utility\n        const result = (0,_utils_validation__WEBPACK_IMPORTED_MODULE_1__.validateAndTransformStation)(station, index);\n        if (!result.valid) {\n            console.warn(`⚠️ Skipping invalid station at index ${index}:`, result.errors);\n            return null;\n        }\n        // Ensure coordinates are properly set from our validation\n        // This guarantees we have valid lat/lng even if the transform utility missed them\n        const transformedStation = {\n            ...result.station,\n            latitude: validation.lat,\n            longitude: validation.lng,\n            lat: validation.lat,\n            lng: validation.lng,\n            source: this.activeSource,\n            // Ensure fuelPrices is always an array\n            fuelPrices: Array.isArray(result.station.fuelPrices) ? result.station.fuelPrices.filter((f)=>f && typeof f === 'object') : []\n        };\n        return transformedStation;\n    }\n    /**\n   * Fetch stations from the active data source\n   * @param {boolean} forceRefresh - Force refresh even if cache is valid\n   * @returns {Promise<Array>} Array of transformed station data\n   */ async fetchStations(forceRefresh = false) {\n        const cacheKey = `stations_${this.activeSource}`;\n        // Return cached data if valid and not forcing refresh\n        if (!forceRefresh && this.isCacheValid() && this.dataCache.has(cacheKey)) {\n            console.log('📦 Returning cached station data');\n            return this.dataCache.get(cacheKey);\n        }\n        // Prevent multiple simultaneous requests\n        if (this.isLoading) {\n            console.log('⏳ Data fetch already in progress, waiting...');\n            return new Promise((resolve, reject)=>{\n                const startTime = Date.now();\n                const maxWaitTime = 15000; // 15 seconds max wait\n                const checkLoading = ()=>{\n                    const elapsed = Date.now() - startTime;\n                    if (!this.isLoading) {\n                        console.log(`✅ Wait completed after ${elapsed}ms`);\n                        resolve(this.dataCache.get(cacheKey) || []);\n                    } else if (elapsed >= maxWaitTime) {\n                        console.error(`⏰ Wait timeout after ${elapsed}ms - isLoading flag stuck!`);\n                        this.isLoading = false; // Force reset the flag\n                        reject(new Error('Data fetch wait timeout - concurrent request took too long'));\n                    } else {\n                        setTimeout(checkLoading, 100);\n                    }\n                };\n                checkLoading();\n            });\n        }\n        try {\n            this.isLoading = true;\n            console.log(`🚀 Fetching stations from ${this.activeSource}...`);\n            let rawStations = [];\n            switch(this.activeSource){\n                case 'local':\n                    try {\n                        rawStations = await _LocalDataService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].fetchStations();\n                    } catch (error) {\n                        console.warn('⚠️ Local data failed, trying Baserow...', error.message);\n                        this.setActiveSource('baserow');\n                        try {\n                            rawStations = await _config__WEBPACK_IMPORTED_MODULE_0__.baserowAPI.fetchAllStations();\n                        } catch (baserowError) {\n                            console.warn('⚠️ Baserow also failed, using mock data', baserowError.message);\n                            this.setActiveSource('mock');\n                            rawStations = this.getMockStations();\n                        }\n                    }\n                    break;\n                case 'baserow':\n                    try {\n                        rawStations = await _config__WEBPACK_IMPORTED_MODULE_0__.baserowAPI.fetchAllStations();\n                    } catch (error) {\n                        console.warn('⚠️ Baserow API failed, falling back to mock data:', error.message);\n                        console.log('🔄 Switching to mock data source due to API issues');\n                        this.setActiveSource('mock');\n                        rawStations = this.getMockStations();\n                    }\n                    break;\n                case 'airtable':\n                    // Airtable integration would go here\n                    throw new Error('Airtable integration not implemented');\n                case 'mock':\n                    rawStations = this.getMockStations();\n                    break;\n                default:\n                    throw new Error(`Unknown data source: ${this.activeSource}`);\n            }\n            console.log(`📊 Raw data received: ${rawStations.length} stations from ${this.activeSource}`);\n            // Validate that we received data\n            if (!Array.isArray(rawStations) || rawStations.length === 0) {\n                throw new Error(`No station data received from ${this.activeSource}`);\n            }\n            // Transform and validate all station data\n            const transformedStations = rawStations.map((station, index)=>this.transformStationData(station, index)).filter((station)=>station !== null); // Remove invalid stations\n            console.log(`📈 Data transformation complete:`);\n            console.log(`   - Raw stations: ${rawStations.length}`);\n            console.log(`   - Valid stations: ${transformedStations.length}`);\n            console.log(`   - Invalid stations: ${rawStations.length - transformedStations.length}`);\n            // Validate that we have enough valid stations\n            if (transformedStations.length === 0) {\n                throw new Error('No valid stations found after data transformation');\n            }\n            if (transformedStations.length < 10) {\n                console.warn(`⚠️ Only ${transformedStations.length} valid stations found - this may indicate data quality issues`);\n            }\n            // Cache the transformed data\n            this.dataCache.set(cacheKey, transformedStations);\n            this.lastFetchTime = Date.now();\n            console.log(`✅ Successfully loaded ${transformedStations.length} stations from ${this.activeSource}`);\n            return transformedStations;\n        } catch (error) {\n            console.error(`❌ Error fetching stations from ${this.activeSource}:`, error);\n            // Create user-friendly error message\n            const userMessage = (0,_utils_validation__WEBPACK_IMPORTED_MODULE_1__.getUserFriendlyError)(error, 'loading station data');\n            console.log(`💬 User-friendly message: ${userMessage}`);\n            // Store the user-friendly error message\n            this.lastError = {\n                technical: error.message,\n                userFriendly: userMessage,\n                timestamp: new Date().toISOString()\n            };\n            // Return fallback data if available\n            if (this.dataCache.has(cacheKey)) {\n                console.log('🔄 Returning cached data due to error');\n                return this.dataCache.get(cacheKey);\n            }\n            // Return mock data as last resort\n            console.log('🔄 Returning mock data as fallback');\n            return this.getMockStations();\n        } finally{\n            this.isLoading = false;\n        }\n    }\n    /**\n   * Get mock station data for testing/fallback\n   * @returns {Array} Array of mock station data\n   */ getMockStations() {\n        return [\n            {\n                id: 1,\n                name: 'Shell Melbourne CBD',\n                lat: -37.8136,\n                lng: 144.9631,\n                prices: {\n                    unleaded: 185.9,\n                    premium: 195.9,\n                    premium98: 210.5,\n                    diesel: 179.9,\n                    gas: 95.2\n                },\n                address: '123 Collins Street, Melbourne',\n                city: 'Melbourne',\n                source: 'mock',\n                lastUpdated: new Date().toISOString()\n            },\n            {\n                id: 2,\n                name: 'BP South Yarra',\n                lat: -37.8387,\n                lng: 144.9924,\n                prices: {\n                    unleaded: 182.5,\n                    premium: 192.5,\n                    premium98: 207.8,\n                    diesel: 176.8,\n                    gas: 92.1\n                },\n                address: '456 Toorak Road, South Yarra',\n                city: 'South Yarra',\n                source: 'mock',\n                lastUpdated: new Date().toISOString()\n            },\n            {\n                id: 3,\n                name: 'Caltex Richmond',\n                lat: -37.8197,\n                lng: 145.0058,\n                prices: {\n                    unleaded: 188.9,\n                    premium: 198.9,\n                    premium98: 213.2,\n                    diesel: 183.2,\n                    gas: 97.5\n                },\n                address: '789 Swan Street, Richmond',\n                city: 'Richmond',\n                source: 'mock',\n                lastUpdated: new Date().toISOString()\n            }\n        ];\n    }\n    /**\n   * Get the last error with user-friendly message\n   * @returns {Object|null} Last error information or null\n   */ getLastError() {\n        return this.lastError || null;\n    }\n    /**\n   * Clear the last error\n   */ clearError() {\n        this.lastError = null;\n    }\n    /**\n   * Get data source status information\n   * @returns {Object} Status information\n   */ getStatus() {\n        return {\n            activeSource: this.activeSource,\n            isLoading: this.isLoading,\n            lastFetchTime: this.lastFetchTime,\n            cacheValid: this.isCacheValid(),\n            cacheSize: this.dataCache.size,\n            availableSources: [\n                'local',\n                'baserow',\n                'airtable',\n                'mock'\n            ],\n            lastError: this.lastError\n        };\n    }\n    /**\n   * Test connection to the active data source\n   * @returns {Promise<Object>} Connection test result\n   */ async testConnection() {\n        try {\n            switch(this.activeSource){\n                case 'local':\n                    // Test if local files are accessible\n                    try {\n                        const response = await fetch('/data/stations.geojson', {\n                            method: 'HEAD'\n                        });\n                        return {\n                            connected: response.ok,\n                            source: 'local (GeoJSON)'\n                        };\n                    } catch  {\n                        return {\n                            connected: false,\n                            error: 'Local data files not accessible'\n                        };\n                    }\n                case 'baserow':\n                    return await _config__WEBPACK_IMPORTED_MODULE_0__.baserowAPI.testConnection();\n                case 'airtable':\n                    throw new Error('Airtable integration not implemented');\n                case 'mock':\n                    return {\n                        connected: true,\n                        source: 'mock'\n                    };\n                default:\n                    throw new Error(`Unknown data source: ${this.activeSource}`);\n            }\n        } catch (error) {\n            console.error(`❌ Connection test failed for ${this.activeSource}:`, error);\n            return {\n                connected: false,\n                error: error.message\n            };\n        }\n    }\n}\n// Create singleton instance\nconst dataSourceManager = new DataSourceManager();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dataSourceManager);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/services/DataSourceManager.js\n");

/***/ }),

/***/ "(pages-dir-node)/./src/services/LocalDataService.js":
/*!******************************************!*\
  !*** ./src/services/LocalDataService.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Local Data Service\n * Handles loading and parsing station data from local GeoJSON and CSV files\n */ class LocalDataService {\n    constructor(){\n        this.cache = null;\n        this.cacheTimestamp = null;\n        this.CACHE_DURATION = 1000 * 60 * 30; // 30 minutes\n    }\n    /**\n   * Fetch stations from local GeoJSON file\n   * @returns {Promise<Array>} Array of station objects\n   */ async fetchStations() {\n        // Check cache first\n        if (this.cache && this.cacheTimestamp) {\n            const now = Date.now();\n            if (now - this.cacheTimestamp < this.CACHE_DURATION) {\n                console.log('📦 Returning cached local data');\n                return this.cache;\n            }\n        }\n        try {\n            console.log('🗺️ Loading stations from local GeoJSON...');\n            // Try GeoJSON first (most complete data with coordinates)\n            const geojsonData = await this.loadGeoJSON();\n            if (geojsonData && geojsonData.length > 0) {\n                console.log(`✅ Loaded ${geojsonData.length} stations from GeoJSON`);\n                this.cache = geojsonData;\n                this.cacheTimestamp = Date.now();\n                return geojsonData;\n            }\n            // Fallback to CSV\n            console.log('📄 Falling back to CSV data...');\n            const csvData = await this.loadCSV();\n            if (csvData && csvData.length > 0) {\n                console.log(`✅ Loaded ${csvData.length} stations from CSV`);\n                this.cache = csvData;\n                this.cacheTimestamp = Date.now();\n                return csvData;\n            }\n            throw new Error('No local data files available');\n        } catch (error) {\n            console.error('❌ Error loading local data:', error);\n            throw error;\n        }\n    }\n    /**\n   * Load and parse GeoJSON file\n   * @returns {Promise<Array>} Parsed station array\n   */ async loadGeoJSON() {\n        try {\n            const response = await fetch('/data/stations.geojson');\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            if (!data.features || !Array.isArray(data.features)) {\n                throw new Error('Invalid GeoJSON format');\n            }\n            return data.features.map((feature, index)=>this.parseGeoJSONFeature(feature, index));\n        } catch (error) {\n            console.warn('Could not load GeoJSON:', error.message);\n            return null;\n        }\n    }\n    /**\n   * Parse individual GeoJSON feature into station object\n   * @param {Object} feature GeoJSON feature\n   * @param {number} index Feature index\n   * @returns {Object} Normalized station object\n   */ parseGeoJSONFeature(feature, index) {\n        const props = feature.properties || {};\n        const coords = feature.geometry?.coordinates || [\n            0,\n            0\n        ];\n        // Extract brand from station owner\n        const owner = props.station_owner || '';\n        let brand = owner;\n        // Normalize brand names\n        if (owner.includes('7-ELEVEN') || owner.includes('7 ELEVEN')) {\n            brand = '7-Eleven';\n        } else if (owner.includes('BP')) {\n            brand = 'BP';\n        } else if (owner.includes('SHELL')) {\n            brand = 'Shell';\n        } else if (owner.includes('CALTEX')) {\n            brand = 'Caltex';\n        } else if (owner.includes('AMPOL')) {\n            brand = 'Ampol';\n        } else if (owner.includes('MOBIL')) {\n            brand = 'Mobil';\n        } else if (owner.includes('UNITED')) {\n            brand = 'United';\n        }\n        // Determine region based on suburb (basic mapping)\n        const region = this.getRegionFromSuburb(props.station_suburb || '');\n        return {\n            id: props.objectid || index + 1,\n            name: props.station_name || 'Unknown Station',\n            address: props.station_address || props.gnaf_formatted_address || '',\n            city: props.station_suburb || props.gnaf_suburb || '',\n            postalCode: props.station_postcode || props.gnaf_postcode || '',\n            region: region,\n            state: props.station_state || 'VIC',\n            brand: brand,\n            category: props.feature_type || 'PETROL STATION',\n            // Use capitalized field names to match validation.js expectations\n            Latitude: coords[1],\n            Longitude: coords[0],\n            lat: coords[1],\n            lng: coords[0],\n            operationalStatus: props.operational_status || 'OPERATIONAL',\n            description: props.station_description || '',\n            lastUpdated: props.station_revised_date || new Date().toISOString(),\n            spatialConfidence: props.spatial_confidence,\n            industryId: props.industry_id,\n            // Add mock fuel prices for display\n            fuelPrices: this.generateMockPrices(brand)\n        };\n    }\n    /**\n   * Generate mock fuel prices for display\n   * @param {string} brand Station brand\n   * @returns {Object} Mock price data\n   */ generateMockPrices(brand) {\n        // Base prices with slight variation by brand\n        const brandPricing = {\n            'BP': {\n                base: 1.95,\n                variance: 0.05\n            },\n            'Shell': {\n                base: 1.93,\n                variance: 0.05\n            },\n            'Caltex': {\n                base: 1.94,\n                variance: 0.05\n            },\n            'Ampol': {\n                base: 1.92,\n                variance: 0.05\n            },\n            '7-Eleven': {\n                base: 1.89,\n                variance: 0.05\n            },\n            'Mobil': {\n                base: 1.96,\n                variance: 0.05\n            },\n            'United': {\n                base: 1.88,\n                variance: 0.05\n            },\n            'default': {\n                base: 1.94,\n                variance: 0.08\n            }\n        };\n        const pricing = brandPricing[brand] || brandPricing.default;\n        const basePrice = pricing.base + (Math.random() - 0.5) * pricing.variance * 2;\n        return {\n            unleaded: basePrice.toFixed(2),\n            premium: (basePrice + 0.15).toFixed(2),\n            diesel: (basePrice - 0.03).toFixed(2),\n            e10: (basePrice - 0.05).toFixed(2),\n            lastUpdated: new Date().toISOString()\n        };\n    }\n    /**\n   * Map suburb to region\n   * @param {string} suburb Suburb name\n   * @returns {string} Region identifier\n   */ getRegionFromSuburb(suburb) {\n        if (!suburb) return 'VIC';\n        const suburbUpper = suburb.toUpperCase();\n        // Northern suburbs\n        const north = [\n            'PRESTON',\n            'COBURG',\n            'ESSENDON',\n            'TULLAMARINE',\n            'EPPING',\n            'THOMASTOWN',\n            'WOLLERT',\n            'CRAIGIEBURN',\n            'BROADMEADOWS',\n            'GREENSBOROUGH',\n            'ELTHAM'\n        ];\n        if (north.some((s)=>suburbUpper.includes(s))) return 'North Melbourne';\n        // Western suburbs\n        const west = [\n            'FOOTSCRAY',\n            'SUNSHINE',\n            'WERRIBEE',\n            'POINT COOK',\n            'BROOKLYN',\n            'DEER PARK',\n            'HOPPERS CROSSING',\n            'ALTONA',\n            'WILLIAMSTOWN',\n            'MARIBYRNONG'\n        ];\n        if (west.some((s)=>suburbUpper.includes(s))) return 'West Melbourne';\n        // Eastern suburbs\n        const east = [\n            'DONCASTER',\n            'BOX HILL',\n            'RINGWOOD',\n            'GLEN WAVERLEY',\n            'BURWOOD',\n            'MITCHAM',\n            'BLACKBURN',\n            'NUNAWADING',\n            'CROYDON',\n            'BAYSWATER'\n        ];\n        if (east.some((s)=>suburbUpper.includes(s))) return 'East Melbourne';\n        // Inner CBD\n        const cbd = [\n            'MELBOURNE',\n            'CARLTON',\n            'FITZROY',\n            'SOUTH YARRA',\n            'RICHMOND',\n            'COLLINGWOOD',\n            'NORTHCOTE',\n            'BRUNSWICK',\n            'PARKVILLE',\n            'KENSINGTON',\n            'ABBOTSFORD'\n        ];\n        if (cbd.some((s)=>suburbUpper.includes(s))) return 'Melbourne CBD';\n        // South Eastern suburbs\n        const southeast = [\n            'FRANKSTON',\n            'DANDENONG',\n            'CRANBOURNE',\n            'CLAYTON',\n            'SPRINGVALE',\n            'NOBLE PARK',\n            'CHELTENHAM',\n            'MOORABBIN',\n            'MORDIALLOC',\n            'BENTLEIGH'\n        ];\n        if (southeast.some((s)=>suburbUpper.includes(s))) return 'South East Melbourne';\n        // Default to VIC (regional)\n        return 'VIC';\n    }\n    /**\n   * Load and parse CSV file\n   * @returns {Promise<Array>} Parsed station array\n   */ async loadCSV() {\n        try {\n            const response = await fetch('/data/stations.csv');\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const text = await response.text();\n            return this.parseCSV(text);\n        } catch (error) {\n            console.warn('Could not load CSV:', error.message);\n            return null;\n        }\n    }\n    /**\n   * Parse CSV text into station array\n   * @param {string} text CSV text\n   * @returns {Array} Parsed station array\n   */ parseCSV(text) {\n        const lines = text.split('\\n');\n        if (lines.length < 2) return [];\n        const headers = lines[0].split('|').map((h)=>h.trim());\n        return lines.slice(1).filter((line)=>line.trim()).map((line, index)=>{\n            const values = line.split('|');\n            const station = {};\n            headers.forEach((header, i)=>{\n                station[header] = values[i] ? values[i].trim() : '';\n            });\n            return {\n                id: station.id || index + 1,\n                name: station['Station Name'] || 'Unknown Station',\n                address: station['Address'] || '',\n                city: station['City'] || '',\n                postalCode: station['Postal Code'] || '',\n                region: station['Region'] || 'VIC',\n                category: station['Category'] || 'PETROL STATION',\n                brand: this.extractBrandFromCSV(station.brand),\n                // Use capitalized field names to match validation.js expectations\n                Latitude: 0,\n                Longitude: 0,\n                lat: 0,\n                lng: 0,\n                operationalStatus: 'OPERATIONAL',\n                locationDetails: station['Location Details'] || '',\n                lastUpdated: new Date().toISOString(),\n                fuelPrices: this.generateMockPrices(this.extractBrandFromCSV(station.brand))\n            };\n        });\n    }\n    /**\n   * Extract brand name from CSV brand field\n   * @param {string} brandField Brand field from CSV\n   * @returns {string} Cleaned brand name\n   */ extractBrandFromCSV(brandField) {\n        if (!brandField) return 'Independent';\n        // Brand field might contain image URL, extract text before it\n        const brandText = brandField.split('(')[0].trim();\n        // If there's an actual image name, use it\n        if (brandText && brandText !== 'Untitled.png') {\n            return brandText;\n        }\n        return 'Independent';\n    }\n    /**\n   * Clear cache\n   */ clearCache() {\n        this.cache = null;\n        this.cacheTimestamp = null;\n    }\n}\n// Export singleton instance\nconst localDataService = new LocalDataService();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (localDataService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL3NyYy9zZXJ2aWNlcy9Mb2NhbERhdGFTZXJ2aWNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7O0NBR0MsR0FFRCxNQUFNQTtJQUNKLGFBQWM7UUFDWixJQUFJLENBQUNDLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ0MsY0FBYyxHQUFHO1FBQ3RCLElBQUksQ0FBQ0MsY0FBYyxHQUFHLE9BQU8sS0FBSyxJQUFJLGFBQWE7SUFDckQ7SUFFQTs7O0dBR0MsR0FDRCxNQUFNQyxnQkFBZ0I7UUFDcEIsb0JBQW9CO1FBQ3BCLElBQUksSUFBSSxDQUFDSCxLQUFLLElBQUksSUFBSSxDQUFDQyxjQUFjLEVBQUU7WUFDckMsTUFBTUcsTUFBTUMsS0FBS0QsR0FBRztZQUNwQixJQUFJQSxNQUFNLElBQUksQ0FBQ0gsY0FBYyxHQUFHLElBQUksQ0FBQ0MsY0FBYyxFQUFFO2dCQUNuREksUUFBUUMsR0FBRyxDQUFDO2dCQUNaLE9BQU8sSUFBSSxDQUFDUCxLQUFLO1lBQ25CO1FBQ0Y7UUFFQSxJQUFJO1lBQ0ZNLFFBQVFDLEdBQUcsQ0FBQztZQUVaLDBEQUEwRDtZQUMxRCxNQUFNQyxjQUFjLE1BQU0sSUFBSSxDQUFDQyxXQUFXO1lBQzFDLElBQUlELGVBQWVBLFlBQVlFLE1BQU0sR0FBRyxHQUFHO2dCQUN6Q0osUUFBUUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFQyxZQUFZRSxNQUFNLENBQUMsc0JBQXNCLENBQUM7Z0JBQ2xFLElBQUksQ0FBQ1YsS0FBSyxHQUFHUTtnQkFDYixJQUFJLENBQUNQLGNBQWMsR0FBR0ksS0FBS0QsR0FBRztnQkFDOUIsT0FBT0k7WUFDVDtZQUVBLGtCQUFrQjtZQUNsQkYsUUFBUUMsR0FBRyxDQUFDO1lBQ1osTUFBTUksVUFBVSxNQUFNLElBQUksQ0FBQ0MsT0FBTztZQUNsQyxJQUFJRCxXQUFXQSxRQUFRRCxNQUFNLEdBQUcsR0FBRztnQkFDakNKLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRUks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c291cmNlcyI6WyJDOlxcVXNlcnNcXHplbmJvXFxEZXNrdG9wXFxQUE5NXFxzcmNcXHNlcnZpY2VzXFxMb2NhbERhdGFTZXJ2aWNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTG9jYWwgRGF0YSBTZXJ2aWNlXG4gKiBIYW5kbGVzIGxvYWRpbmcgYW5kIHBhcnNpbmcgc3RhdGlvbiBkYXRhIGZyb20gbG9jYWwgR2VvSlNPTiBhbmQgQ1NWIGZpbGVzXG4gKi9cblxuY2xhc3MgTG9jYWxEYXRhU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY2FjaGUgPSBudWxsO1xuICAgIHRoaXMuY2FjaGVUaW1lc3RhbXAgPSBudWxsO1xuICAgIHRoaXMuQ0FDSEVfRFVSQVRJT04gPSAxMDAwICogNjAgKiAzMDsgLy8gMzAgbWludXRlc1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHN0YXRpb25zIGZyb20gbG9jYWwgR2VvSlNPTiBmaWxlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gQXJyYXkgb2Ygc3RhdGlvbiBvYmplY3RzXG4gICAqL1xuICBhc3luYyBmZXRjaFN0YXRpb25zKCkge1xuICAgIC8vIENoZWNrIGNhY2hlIGZpcnN0XG4gICAgaWYgKHRoaXMuY2FjaGUgJiYgdGhpcy5jYWNoZVRpbWVzdGFtcCkge1xuICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgIGlmIChub3cgLSB0aGlzLmNhY2hlVGltZXN0YW1wIDwgdGhpcy5DQUNIRV9EVVJBVElPTikge1xuICAgICAgICBjb25zb2xlLmxvZygn8J+TpiBSZXR1cm5pbmcgY2FjaGVkIGxvY2FsIGRhdGEnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCfwn5e677iPIExvYWRpbmcgc3RhdGlvbnMgZnJvbSBsb2NhbCBHZW9KU09OLi4uJyk7XG5cbiAgICAgIC8vIFRyeSBHZW9KU09OIGZpcnN0IChtb3N0IGNvbXBsZXRlIGRhdGEgd2l0aCBjb29yZGluYXRlcylcbiAgICAgIGNvbnN0IGdlb2pzb25EYXRhID0gYXdhaXQgdGhpcy5sb2FkR2VvSlNPTigpO1xuICAgICAgaWYgKGdlb2pzb25EYXRhICYmIGdlb2pzb25EYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coYOKchSBMb2FkZWQgJHtnZW9qc29uRGF0YS5sZW5ndGh9IHN0YXRpb25zIGZyb20gR2VvSlNPTmApO1xuICAgICAgICB0aGlzLmNhY2hlID0gZ2VvanNvbkRhdGE7XG4gICAgICAgIHRoaXMuY2FjaGVUaW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgICAgICByZXR1cm4gZ2VvanNvbkRhdGE7XG4gICAgICB9XG5cbiAgICAgIC8vIEZhbGxiYWNrIHRvIENTVlxuICAgICAgY29uc29sZS5sb2coJ/Cfk4QgRmFsbGluZyBiYWNrIHRvIENTViBkYXRhLi4uJyk7XG4gICAgICBjb25zdCBjc3ZEYXRhID0gYXdhaXQgdGhpcy5sb2FkQ1NWKCk7XG4gICAgICBpZiAoY3N2RGF0YSAmJiBjc3ZEYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coYOKchSBMb2FkZWQgJHtjc3ZEYXRhLmxlbmd0aH0gc3RhdGlvbnMgZnJvbSBDU1ZgKTtcbiAgICAgICAgdGhpcy5jYWNoZSA9IGNzdkRhdGE7XG4gICAgICAgIHRoaXMuY2FjaGVUaW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgICAgICByZXR1cm4gY3N2RGF0YTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBsb2NhbCBkYXRhIGZpbGVzIGF2YWlsYWJsZScpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgbG9hZGluZyBsb2NhbCBkYXRhOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIGFuZCBwYXJzZSBHZW9KU09OIGZpbGVcbiAgICogQHJldHVybnMge1Byb21pc2U8QXJyYXk+fSBQYXJzZWQgc3RhdGlvbiBhcnJheVxuICAgKi9cbiAgYXN5bmMgbG9hZEdlb0pTT04oKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9kYXRhL3N0YXRpb25zLmdlb2pzb24nKTtcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQIGVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgICBpZiAoIWRhdGEuZmVhdHVyZXMgfHwgIUFycmF5LmlzQXJyYXkoZGF0YS5mZWF0dXJlcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEdlb0pTT04gZm9ybWF0Jyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhLmZlYXR1cmVzLm1hcCgoZmVhdHVyZSwgaW5kZXgpID0+IHRoaXMucGFyc2VHZW9KU09ORmVhdHVyZShmZWF0dXJlLCBpbmRleCkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBsb2FkIEdlb0pTT046JywgZXJyb3IubWVzc2FnZSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgaW5kaXZpZHVhbCBHZW9KU09OIGZlYXR1cmUgaW50byBzdGF0aW9uIG9iamVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZmVhdHVyZSBHZW9KU09OIGZlYXR1cmVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEZlYXR1cmUgaW5kZXhcbiAgICogQHJldHVybnMge09iamVjdH0gTm9ybWFsaXplZCBzdGF0aW9uIG9iamVjdFxuICAgKi9cbiAgcGFyc2VHZW9KU09ORmVhdHVyZShmZWF0dXJlLCBpbmRleCkge1xuICAgIGNvbnN0IHByb3BzID0gZmVhdHVyZS5wcm9wZXJ0aWVzIHx8IHt9O1xuICAgIGNvbnN0IGNvb3JkcyA9IGZlYXR1cmUuZ2VvbWV0cnk/LmNvb3JkaW5hdGVzIHx8IFswLCAwXTtcblxuICAgIC8vIEV4dHJhY3QgYnJhbmQgZnJvbSBzdGF0aW9uIG93bmVyXG4gICAgY29uc3Qgb3duZXIgPSBwcm9wcy5zdGF0aW9uX293bmVyIHx8ICcnO1xuICAgIGxldCBicmFuZCA9IG93bmVyO1xuXG4gICAgLy8gTm9ybWFsaXplIGJyYW5kIG5hbWVzXG4gICAgaWYgKG93bmVyLmluY2x1ZGVzKCc3LUVMRVZFTicpIHx8IG93bmVyLmluY2x1ZGVzKCc3IEVMRVZFTicpKSB7XG4gICAgICBicmFuZCA9ICc3LUVsZXZlbic7XG4gICAgfSBlbHNlIGlmIChvd25lci5pbmNsdWRlcygnQlAnKSkge1xuICAgICAgYnJhbmQgPSAnQlAnO1xuICAgIH0gZWxzZSBpZiAob3duZXIuaW5jbHVkZXMoJ1NIRUxMJykpIHtcbiAgICAgIGJyYW5kID0gJ1NoZWxsJztcbiAgICB9IGVsc2UgaWYgKG93bmVyLmluY2x1ZGVzKCdDQUxURVgnKSkge1xuICAgICAgYnJhbmQgPSAnQ2FsdGV4JztcbiAgICB9IGVsc2UgaWYgKG93bmVyLmluY2x1ZGVzKCdBTVBPTCcpKSB7XG4gICAgICBicmFuZCA9ICdBbXBvbCc7XG4gICAgfSBlbHNlIGlmIChvd25lci5pbmNsdWRlcygnTU9CSUwnKSkge1xuICAgICAgYnJhbmQgPSAnTW9iaWwnO1xuICAgIH0gZWxzZSBpZiAob3duZXIuaW5jbHVkZXMoJ1VOSVRFRCcpKSB7XG4gICAgICBicmFuZCA9ICdVbml0ZWQnO1xuICAgIH1cblxuICAgIC8vIERldGVybWluZSByZWdpb24gYmFzZWQgb24gc3VidXJiIChiYXNpYyBtYXBwaW5nKVxuICAgIGNvbnN0IHJlZ2lvbiA9IHRoaXMuZ2V0UmVnaW9uRnJvbVN1YnVyYihwcm9wcy5zdGF0aW9uX3N1YnVyYiB8fCAnJyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IHByb3BzLm9iamVjdGlkIHx8IGluZGV4ICsgMSxcbiAgICAgIG5hbWU6IHByb3BzLnN0YXRpb25fbmFtZSB8fCAnVW5rbm93biBTdGF0aW9uJyxcbiAgICAgIGFkZHJlc3M6IHByb3BzLnN0YXRpb25fYWRkcmVzcyB8fCBwcm9wcy5nbmFmX2Zvcm1hdHRlZF9hZGRyZXNzIHx8ICcnLFxuICAgICAgY2l0eTogcHJvcHMuc3RhdGlvbl9zdWJ1cmIgfHwgcHJvcHMuZ25hZl9zdWJ1cmIgfHwgJycsXG4gICAgICBwb3N0YWxDb2RlOiBwcm9wcy5zdGF0aW9uX3Bvc3Rjb2RlIHx8IHByb3BzLmduYWZfcG9zdGNvZGUgfHwgJycsXG4gICAgICByZWdpb246IHJlZ2lvbixcbiAgICAgIHN0YXRlOiBwcm9wcy5zdGF0aW9uX3N0YXRlIHx8ICdWSUMnLFxuICAgICAgYnJhbmQ6IGJyYW5kLFxuICAgICAgY2F0ZWdvcnk6IHByb3BzLmZlYXR1cmVfdHlwZSB8fCAnUEVUUk9MIFNUQVRJT04nLFxuICAgICAgLy8gVXNlIGNhcGl0YWxpemVkIGZpZWxkIG5hbWVzIHRvIG1hdGNoIHZhbGlkYXRpb24uanMgZXhwZWN0YXRpb25zXG4gICAgICBMYXRpdHVkZTogY29vcmRzWzFdLCAgLy8gR2VvSlNPTiBpcyBbbG5nLCBsYXRdXG4gICAgICBMb25naXR1ZGU6IGNvb3Jkc1swXSxcbiAgICAgIGxhdDogY29vcmRzWzFdLCAgLy8gQWxzbyBwcm92aWRlIGxvd2VyY2FzZSBmb3IgY29tcGF0aWJpbGl0eVxuICAgICAgbG5nOiBjb29yZHNbMF0sXG4gICAgICBvcGVyYXRpb25hbFN0YXR1czogcHJvcHMub3BlcmF0aW9uYWxfc3RhdHVzIHx8ICdPUEVSQVRJT05BTCcsXG4gICAgICBkZXNjcmlwdGlvbjogcHJvcHMuc3RhdGlvbl9kZXNjcmlwdGlvbiB8fCAnJyxcbiAgICAgIGxhc3RVcGRhdGVkOiBwcm9wcy5zdGF0aW9uX3JldmlzZWRfZGF0ZSB8fCBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBzcGF0aWFsQ29uZmlkZW5jZTogcHJvcHMuc3BhdGlhbF9jb25maWRlbmNlLFxuICAgICAgaW5kdXN0cnlJZDogcHJvcHMuaW5kdXN0cnlfaWQsXG4gICAgICAvLyBBZGQgbW9jayBmdWVsIHByaWNlcyBmb3IgZGlzcGxheVxuICAgICAgZnVlbFByaWNlczogdGhpcy5nZW5lcmF0ZU1vY2tQcmljZXMoYnJhbmQpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBtb2NrIGZ1ZWwgcHJpY2VzIGZvciBkaXNwbGF5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBicmFuZCBTdGF0aW9uIGJyYW5kXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IE1vY2sgcHJpY2UgZGF0YVxuICAgKi9cbiAgZ2VuZXJhdGVNb2NrUHJpY2VzKGJyYW5kKSB7XG4gICAgLy8gQmFzZSBwcmljZXMgd2l0aCBzbGlnaHQgdmFyaWF0aW9uIGJ5IGJyYW5kXG4gICAgY29uc3QgYnJhbmRQcmljaW5nID0ge1xuICAgICAgJ0JQJzogeyBiYXNlOiAxLjk1LCB2YXJpYW5jZTogMC4wNSB9LFxuICAgICAgJ1NoZWxsJzogeyBiYXNlOiAxLjkzLCB2YXJpYW5jZTogMC4wNSB9LFxuICAgICAgJ0NhbHRleCc6IHsgYmFzZTogMS45NCwgdmFyaWFuY2U6IDAuMDUgfSxcbiAgICAgICdBbXBvbCc6IHsgYmFzZTogMS45MiwgdmFyaWFuY2U6IDAuMDUgfSxcbiAgICAgICc3LUVsZXZlbic6IHsgYmFzZTogMS44OSwgdmFyaWFuY2U6IDAuMDUgfSxcbiAgICAgICdNb2JpbCc6IHsgYmFzZTogMS45NiwgdmFyaWFuY2U6IDAuMDUgfSxcbiAgICAgICdVbml0ZWQnOiB7IGJhc2U6IDEuODgsIHZhcmlhbmNlOiAwLjA1IH0sXG4gICAgICAnZGVmYXVsdCc6IHsgYmFzZTogMS45NCwgdmFyaWFuY2U6IDAuMDggfVxuICAgIH07XG5cbiAgICBjb25zdCBwcmljaW5nID0gYnJhbmRQcmljaW5nW2JyYW5kXSB8fCBicmFuZFByaWNpbmcuZGVmYXVsdDtcbiAgICBjb25zdCBiYXNlUHJpY2UgPSBwcmljaW5nLmJhc2UgKyAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiBwcmljaW5nLnZhcmlhbmNlICogMjtcblxuICAgIHJldHVybiB7XG4gICAgICB1bmxlYWRlZDogKGJhc2VQcmljZSkudG9GaXhlZCgyKSxcbiAgICAgIHByZW1pdW06IChiYXNlUHJpY2UgKyAwLjE1KS50b0ZpeGVkKDIpLFxuICAgICAgZGllc2VsOiAoYmFzZVByaWNlIC0gMC4wMykudG9GaXhlZCgyKSxcbiAgICAgIGUxMDogKGJhc2VQcmljZSAtIDAuMDUpLnRvRml4ZWQoMiksXG4gICAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXAgc3VidXJiIHRvIHJlZ2lvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3VidXJiIFN1YnVyYiBuYW1lXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJlZ2lvbiBpZGVudGlmaWVyXG4gICAqL1xuICBnZXRSZWdpb25Gcm9tU3VidXJiKHN1YnVyYikge1xuICAgIGlmICghc3VidXJiKSByZXR1cm4gJ1ZJQyc7XG5cbiAgICBjb25zdCBzdWJ1cmJVcHBlciA9IHN1YnVyYi50b1VwcGVyQ2FzZSgpO1xuXG4gICAgLy8gTm9ydGhlcm4gc3VidXJic1xuICAgIGNvbnN0IG5vcnRoID0gWydQUkVTVE9OJywgJ0NPQlVSRycsICdFU1NFTkRPTicsICdUVUxMQU1BUklORScsICdFUFBJTkcnLCAnVEhPTUFTVE9XTicsXG4gICAgICAnV09MTEVSVCcsICdDUkFJR0lFQlVSTicsICdCUk9BRE1FQURPV1MnLCAnR1JFRU5TQk9ST1VHSCcsICdFTFRIQU0nXTtcbiAgICBpZiAobm9ydGguc29tZShzID0+IHN1YnVyYlVwcGVyLmluY2x1ZGVzKHMpKSkgcmV0dXJuICdOb3J0aCBNZWxib3VybmUnO1xuXG4gICAgLy8gV2VzdGVybiBzdWJ1cmJzXG4gICAgY29uc3Qgd2VzdCA9IFsnRk9PVFNDUkFZJywgJ1NVTlNISU5FJywgJ1dFUlJJQkVFJywgJ1BPSU5UIENPT0snLCAnQlJPT0tMWU4nLCAnREVFUiBQQVJLJyxcbiAgICAgICdIT1BQRVJTIENST1NTSU5HJywgJ0FMVE9OQScsICdXSUxMSUFNU1RPV04nLCAnTUFSSUJZUk5PTkcnXTtcbiAgICBpZiAod2VzdC5zb21lKHMgPT4gc3VidXJiVXBwZXIuaW5jbHVkZXMocykpKSByZXR1cm4gJ1dlc3QgTWVsYm91cm5lJztcblxuICAgIC8vIEVhc3Rlcm4gc3VidXJic1xuICAgIGNvbnN0IGVhc3QgPSBbJ0RPTkNBU1RFUicsICdCT1ggSElMTCcsICdSSU5HV09PRCcsICdHTEVOIFdBVkVSTEVZJywgJ0JVUldPT0QnLCAnTUlUQ0hBTScsXG4gICAgICAnQkxBQ0tCVVJOJywgJ05VTkFXQURJTkcnLCAnQ1JPWURPTicsICdCQVlTV0FURVInXTtcbiAgICBpZiAoZWFzdC5zb21lKHMgPT4gc3VidXJiVXBwZXIuaW5jbHVkZXMocykpKSByZXR1cm4gJ0Vhc3QgTWVsYm91cm5lJztcblxuICAgIC8vIElubmVyIENCRFxuICAgIGNvbnN0IGNiZCA9IFsnTUVMQk9VUk5FJywgJ0NBUkxUT04nLCAnRklUWlJPWScsICdTT1VUSCBZQVJSQScsICdSSUNITU9ORCcsICdDT0xMSU5HV09PRCcsXG4gICAgICAnTk9SVEhDT1RFJywgJ0JSVU5TV0lDSycsICdQQVJLVklMTEUnLCAnS0VOU0lOR1RPTicsICdBQkJPVFNGT1JEJ107XG4gICAgaWYgKGNiZC5zb21lKHMgPT4gc3VidXJiVXBwZXIuaW5jbHVkZXMocykpKSByZXR1cm4gJ01lbGJvdXJuZSBDQkQnO1xuXG4gICAgLy8gU291dGggRWFzdGVybiBzdWJ1cmJzXG4gICAgY29uc3Qgc291dGhlYXN0ID0gWydGUkFOS1NUT04nLCAnREFOREVOT05HJywgJ0NSQU5CT1VSTkUnLCAnQ0xBWVRPTicsICdTUFJJTkdWQUxFJyxcbiAgICAgICdOT0JMRSBQQVJLJywgJ0NIRUxURU5IQU0nLCAnTU9PUkFCQklOJywgJ01PUkRJQUxMT0MnLCAnQkVOVExFSUdIJ107XG4gICAgaWYgKHNvdXRoZWFzdC5zb21lKHMgPT4gc3VidXJiVXBwZXIuaW5jbHVkZXMocykpKSByZXR1cm4gJ1NvdXRoIEVhc3QgTWVsYm91cm5lJztcblxuICAgIC8vIERlZmF1bHQgdG8gVklDIChyZWdpb25hbClcbiAgICByZXR1cm4gJ1ZJQyc7XG4gIH1cblxuICAvKipcbiAgICogTG9hZCBhbmQgcGFyc2UgQ1NWIGZpbGVcbiAgICogQHJldHVybnMge1Byb21pc2U8QXJyYXk+fSBQYXJzZWQgc3RhdGlvbiBhcnJheVxuICAgKi9cbiAgYXN5bmMgbG9hZENTVigpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2RhdGEvc3RhdGlvbnMuY3N2Jyk7XG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCBlcnJvciEgc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlQ1NWKHRleHQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBsb2FkIENTVjonLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBDU1YgdGV4dCBpbnRvIHN0YXRpb24gYXJyYXlcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgQ1NWIHRleHRcbiAgICogQHJldHVybnMge0FycmF5fSBQYXJzZWQgc3RhdGlvbiBhcnJheVxuICAgKi9cbiAgcGFyc2VDU1YodGV4dCkge1xuICAgIGNvbnN0IGxpbmVzID0gdGV4dC5zcGxpdCgnXFxuJyk7XG4gICAgaWYgKGxpbmVzLmxlbmd0aCA8IDIpIHJldHVybiBbXTtcblxuICAgIGNvbnN0IGhlYWRlcnMgPSBsaW5lc1swXS5zcGxpdCgnfCcpLm1hcChoID0+IGgudHJpbSgpKTtcblxuICAgIHJldHVybiBsaW5lcy5zbGljZSgxKVxuICAgICAgLmZpbHRlcihsaW5lID0+IGxpbmUudHJpbSgpKVxuICAgICAgLm1hcCgobGluZSwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gbGluZS5zcGxpdCgnfCcpO1xuICAgICAgICBjb25zdCBzdGF0aW9uID0ge307XG5cbiAgICAgICAgaGVhZGVycy5mb3JFYWNoKChoZWFkZXIsIGkpID0+IHtcbiAgICAgICAgICBzdGF0aW9uW2hlYWRlcl0gPSB2YWx1ZXNbaV0gPyB2YWx1ZXNbaV0udHJpbSgpIDogJyc7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQ6IHN0YXRpb24uaWQgfHwgaW5kZXggKyAxLFxuICAgICAgICAgIG5hbWU6IHN0YXRpb25bJ1N0YXRpb24gTmFtZSddIHx8ICdVbmtub3duIFN0YXRpb24nLFxuICAgICAgICAgIGFkZHJlc3M6IHN0YXRpb25bJ0FkZHJlc3MnXSB8fCAnJyxcbiAgICAgICAgICBjaXR5OiBzdGF0aW9uWydDaXR5J10gfHwgJycsXG4gICAgICAgICAgcG9zdGFsQ29kZTogc3RhdGlvblsnUG9zdGFsIENvZGUnXSB8fCAnJyxcbiAgICAgICAgICByZWdpb246IHN0YXRpb25bJ1JlZ2lvbiddIHx8ICdWSUMnLFxuICAgICAgICAgIGNhdGVnb3J5OiBzdGF0aW9uWydDYXRlZ29yeSddIHx8ICdQRVRST0wgU1RBVElPTicsXG4gICAgICAgICAgYnJhbmQ6IHRoaXMuZXh0cmFjdEJyYW5kRnJvbUNTVihzdGF0aW9uLmJyYW5kKSxcbiAgICAgICAgICAvLyBVc2UgY2FwaXRhbGl6ZWQgZmllbGQgbmFtZXMgdG8gbWF0Y2ggdmFsaWRhdGlvbi5qcyBleHBlY3RhdGlvbnNcbiAgICAgICAgICBMYXRpdHVkZTogMCwgIC8vIENTViBkb2Vzbid0IGhhdmUgY29vcmRpbmF0ZXNcbiAgICAgICAgICBMb25naXR1ZGU6IDAsXG4gICAgICAgICAgbGF0OiAwLCAgLy8gQWxzbyBwcm92aWRlIGxvd2VyY2FzZSBmb3IgY29tcGF0aWJpbGl0eVxuICAgICAgICAgIGxuZzogMCxcbiAgICAgICAgICBvcGVyYXRpb25hbFN0YXR1czogJ09QRVJBVElPTkFMJyxcbiAgICAgICAgICBsb2NhdGlvbkRldGFpbHM6IHN0YXRpb25bJ0xvY2F0aW9uIERldGFpbHMnXSB8fCAnJyxcbiAgICAgICAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgIGZ1ZWxQcmljZXM6IHRoaXMuZ2VuZXJhdGVNb2NrUHJpY2VzKHRoaXMuZXh0cmFjdEJyYW5kRnJvbUNTVihzdGF0aW9uLmJyYW5kKSlcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4dHJhY3QgYnJhbmQgbmFtZSBmcm9tIENTViBicmFuZCBmaWVsZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnJhbmRGaWVsZCBCcmFuZCBmaWVsZCBmcm9tIENTVlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBDbGVhbmVkIGJyYW5kIG5hbWVcbiAgICovXG4gIGV4dHJhY3RCcmFuZEZyb21DU1YoYnJhbmRGaWVsZCkge1xuICAgIGlmICghYnJhbmRGaWVsZCkgcmV0dXJuICdJbmRlcGVuZGVudCc7XG5cbiAgICAvLyBCcmFuZCBmaWVsZCBtaWdodCBjb250YWluIGltYWdlIFVSTCwgZXh0cmFjdCB0ZXh0IGJlZm9yZSBpdFxuICAgIGNvbnN0IGJyYW5kVGV4dCA9IGJyYW5kRmllbGQuc3BsaXQoJygnKVswXS50cmltKCk7XG5cbiAgICAvLyBJZiB0aGVyZSdzIGFuIGFjdHVhbCBpbWFnZSBuYW1lLCB1c2UgaXRcbiAgICBpZiAoYnJhbmRUZXh0ICYmIGJyYW5kVGV4dCAhPT0gJ1VudGl0bGVkLnBuZycpIHtcbiAgICAgIHJldHVybiBicmFuZFRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuICdJbmRlcGVuZGVudCc7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgY2FjaGVcbiAgICovXG4gIGNsZWFyQ2FjaGUoKSB7XG4gICAgdGhpcy5jYWNoZSA9IG51bGw7XG4gICAgdGhpcy5jYWNoZVRpbWVzdGFtcCA9IG51bGw7XG4gIH1cbn1cblxuLy8gRXhwb3J0IHNpbmdsZXRvbiBpbnN0YW5jZVxuY29uc3QgbG9jYWxEYXRhU2VydmljZSA9IG5ldyBMb2NhbERhdGFTZXJ2aWNlKCk7XG5leHBvcnQgZGVmYXVsdCBsb2NhbERhdGFTZXJ2aWNlO1xuXG4iXSwibmFtZXMiOlsiTG9jYWxEYXRhU2VydmljZSIsImNhY2hlIiwiY2FjaGVUaW1lc3RhbXAiLCJDQUNIRV9EVVJBVElPTiIsImZldGNoU3RhdGlvbnMiLCJub3ciLCJEYXRlIiwiY29uc29sZSIsImxvZyIsImdlb2pzb25EYXRhIiwibG9hZEdlb0pTT04iLCJsZW5ndGgiLCJjc3ZEYXRhIiwibG9hZENTViIsIkVycm9yIiwiZXJyb3IiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJzdGF0dXMiLCJkYXRhIiwianNvbiIsImZlYXR1cmVzIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiZmVhdHVyZSIsImluZGV4IiwicGFyc2VHZW9KU09ORmVhdHVyZSIsIndhcm4iLCJtZXNzYWdlIiwicHJvcHMiLCJwcm9wZXJ0aWVzIiwiY29vcmRzIiwiZ2VvbWV0cnkiLCJjb29yZGluYXRlcyIsIm93bmVyIiwic3RhdGlvbl9vd25lciIsImJyYW5kIiwiaW5jbHVkZXMiLCJyZWdpb24iLCJnZXRSZWdpb25Gcm9tU3VidXJiIiwic3RhdGlvbl9zdWJ1cmIiLCJpZCIsIm9iamVjdGlkIiwibmFtZSIsInN0YXRpb25fbmFtZSIsImFkZHJlc3MiLCJzdGF0aW9uX2FkZHJlc3MiLCJnbmFmX2Zvcm1hdHRlZF9hZGRyZXNzIiwiY2l0eSIsImduYWZfc3VidXJiIiwicG9zdGFsQ29kZSIsInN0YXRpb25fcG9zdGNvZGUiLCJnbmFmX3Bvc3Rjb2RlIiwic3RhdGUiLCJzdGF0aW9uX3N0YXRlIiwiY2F0ZWdvcnkiLCJmZWF0dXJlX3R5cGUiLCJMYXRpdHVkZSIsIkxvbmdpdHVkZSIsImxhdCIsImxuZyIsIm9wZXJhdGlvbmFsU3RhdHVzIiwib3BlcmF0aW9uYWxfc3RhdHVzIiwiZGVzY3JpcHRpb24iLCJzdGF0aW9uX2Rlc2NyaXB0aW9uIiwibGFzdFVwZGF0ZWQiLCJzdGF0aW9uX3JldmlzZWRfZGF0ZSIsInRvSVNPU3RyaW5nIiwic3BhdGlhbENvbmZpZGVuY2UiLCJzcGF0aWFsX2NvbmZpZGVuY2UiLCJpbmR1c3RyeUlkIiwiaW5kdXN0cnlfaWQiLCJmdWVsUHJpY2VzIiwiZ2VuZXJhdGVNb2NrUHJpY2VzIiwiYnJhbmRQcmljaW5nIiwiYmFzZSIsInZhcmlhbmNlIiwicHJpY2luZyIsImRlZmF1bHQiLCJiYXNlUHJpY2UiLCJNYXRoIiwicmFuZG9tIiwidW5sZWFkZWQiLCJ0b0ZpeGVkIiwicHJlbWl1bSIsImRpZXNlbCIsImUxMCIsInN1YnVyYiIsInN1YnVyYlVwcGVyIiwidG9VcHBlckNhc2UiLCJub3J0aCIsInNvbWUiLCJzIiwid2VzdCIsImVhc3QiLCJjYmQiLCJzb3V0aGVhc3QiLCJ0ZXh0IiwicGFyc2VDU1YiLCJsaW5lcyIsInNwbGl0IiwiaGVhZGVycyIsImgiLCJ0cmltIiwic2xpY2UiLCJmaWx0ZXIiLCJsaW5lIiwidmFsdWVzIiwic3RhdGlvbiIsImZvckVhY2giLCJoZWFkZXIiLCJpIiwiZXh0cmFjdEJyYW5kRnJvbUNTViIsImxvY2F0aW9uRGV0YWlscyIsImJyYW5kRmllbGQiLCJicmFuZFRleHQiLCJjbGVhckNhY2hlIiwibG9jYWxEYXRhU2VydmljZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/services/LocalDataService.js\n");

/***/ }),

/***/ "(pages-dir-node)/./src/utils/validation.js":
/*!*********************************!*\
  !*** ./src/utils/validation.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getUserFriendlyError: () => (/* binding */ getUserFriendlyError),\n/* harmony export */   validateAPIResponse: () => (/* binding */ validateAPIResponse),\n/* harmony export */   validateAndTransformStation: () => (/* binding */ validateAndTransformStation),\n/* harmony export */   validateStation: () => (/* binding */ validateStation),\n/* harmony export */   validateStations: () => (/* binding */ validateStations)\n/* harmony export */ });\n/**\n * API Response Validation Utilities\n * \n * This module provides validation functions for API responses to ensure data integrity\n * and prevent runtime errors from malformed data.\n */ /**\n * Validate station data structure\n * @param {*} station - Station data to validate\n * @param {number} index - Station index for error messages\n * @returns {{valid: boolean, errors: string[], data: object|null}}\n */ function validateStation(station, index = 0) {\n    const errors = [];\n    // Check if station exists and is an object\n    if (!station || typeof station !== 'object') {\n        return {\n            valid: false,\n            errors: [\n                `Station at index ${index} is not an object`\n            ],\n            data: null\n        };\n    }\n    // Extract and validate ID\n    const id = station.id || station.Id;\n    if (!id) {\n        errors.push(`Station at index ${index} missing id`);\n    }\n    // Extract and validate name - support multiple field name formats\n    const name = station['Station Name'] || station.station_name || station.field_5072130 || station.name;\n    if (!name || typeof name !== 'string') {\n        errors.push(`Station at index ${index} missing or invalid name`);\n    }\n    // Extract and validate coordinates - support CSV (X, Y) and Baserow formats\n    const lat = parseFloat(station.Latitude || station.Y || station.lat || station.latitude || station.field_5072136);\n    const lng = parseFloat(station.Longitude || station.X || station.lng || station.longitude || station.field_5072137);\n    if (!lat || !lng || isNaN(lat) || isNaN(lng)) {\n        errors.push(`Station at index ${index} has invalid coordinates: lat=${lat}, lng=${lng}`);\n    } else {\n        // Validate coordinate ranges\n        if (lat < -90 || lat > 90) {\n            errors.push(`Station at index ${index} has invalid latitude: ${lat} (must be between -90 and 90)`);\n        }\n        if (lng < -180 || lng > 180) {\n            errors.push(`Station at index ${index} has invalid longitude: ${lng} (must be between -180 and 180)`);\n        }\n    }\n    // Extract and normalize fuelPrices\n    let fuelPrices = station['Fuel Prices'] || station.field_5072139 || station.fuelPrices;\n    // Ensure fuelPrices is an array of objects, not IDs\n    if (!Array.isArray(fuelPrices)) {\n        fuelPrices = [];\n    } else {\n        // Filter out non-object items (like Baserow link IDs)\n        fuelPrices = fuelPrices.filter((item)=>item && typeof item === 'object' && item.type);\n    }\n    // If no valid fuel prices, provide default empty array\n    if (fuelPrices.length === 0) {\n        fuelPrices = [];\n    }\n    // Return validation result\n    return {\n        valid: errors.length === 0,\n        errors,\n        data: errors.length === 0 ? {\n            id,\n            name,\n            lat,\n            lng,\n            address: station.Address || station.station_address || station.field_5072131 || station.address,\n            city: station.City || station.station_suburb || station.field_5072132 || station.city,\n            region: station.Region || station.station_state || station.field_5072134 || station.region,\n            postalCode: station['Postal Code'] || station.station_postcode || station.field_5072133 || station.postalCode,\n            country: station.Country || station.field_5072135 || station.country || 'AUSTRALIA',\n            category: station.Category || station.feature_type || station.field_5072138 || station.category,\n            locationDetails: station['Location Details'] || station.station_description || station.field_5072140 || station.locationDetails,\n            fuelPrices: fuelPrices,\n            brand: station.brand || station.station_owner || station.Brand\n        } : null\n    };\n}\n/**\n * Validate array of stations\n * @param {Array} stations - Array of station data\n * @returns {{valid: boolean, errors: string[], validStations: Array, invalidCount: number}}\n */ function validateStations(stations) {\n    if (!Array.isArray(stations)) {\n        return {\n            valid: false,\n            errors: [\n                'Expected an array of stations'\n            ],\n            validStations: [],\n            invalidCount: 0\n        };\n    }\n    const allErrors = [];\n    const validStations = [];\n    let invalidCount = 0;\n    stations.forEach((station, index)=>{\n        const validation = validateStation(station, index);\n        if (validation.valid) {\n            validStations.push(validation.data);\n        } else {\n            invalidCount++;\n            allErrors.push(...validation.errors);\n        }\n    });\n    return {\n        valid: invalidCount === 0,\n        errors: allErrors,\n        validStations,\n        invalidCount,\n        totalCount: stations.length,\n        validCount: validStations.length\n    };\n}\n/**\n * Validate API response structure\n * @param {*} response - API response to validate\n * @returns {{valid: boolean, errors: string[]}}\n */ function validateAPIResponse(response) {\n    const errors = [];\n    if (!response || typeof response !== 'object') {\n        errors.push('Response is not an object');\n        return {\n            valid: false,\n            errors\n        };\n    }\n    // Check for success field\n    if (response.hasOwnProperty('success') && !response.success) {\n        errors.push(`API returned success=false: ${response.error || 'Unknown error'}`);\n    }\n    // Check for data field\n    if (!response.data && !response.results) {\n        errors.push('Response missing data or results field');\n    }\n    return {\n        valid: errors.length === 0,\n        errors\n    };\n}\n/**\n * Create user-friendly error message from technical error\n * @param {Error|string} error - Error object or message\n * @param {string} context - Context of the error (e.g., 'fetching stations')\n * @returns {string} User-friendly error message\n */ function getUserFriendlyError(error, context = 'processing request') {\n    const errorMessage = typeof error === 'string' ? error : error.message || 'Unknown error';\n    // Network errors\n    if (errorMessage.includes('NetworkError') || errorMessage.includes('Failed to fetch')) {\n        return `Unable to connect to the server. Please check your internet connection and try again.`;\n    }\n    // Timeout errors\n    if (errorMessage.includes('timeout') || errorMessage.includes('AbortError')) {\n        return `The request is taking longer than expected. Please check your connection and try again.`;\n    }\n    // CORS errors\n    if (errorMessage.includes('CORS')) {\n        return `There's a connection issue with our servers. Please try again in a few moments.`;\n    }\n    // Authentication errors\n    if (errorMessage.includes('401') || errorMessage.includes('Unauthorized')) {\n        return `Authentication failed. Please refresh the page and try again.`;\n    }\n    // Not found errors\n    if (errorMessage.includes('404') || errorMessage.includes('Not Found')) {\n        return `The requested information could not be found. Please try again later.`;\n    }\n    // Rate limit errors\n    if (errorMessage.includes('429') || errorMessage.includes('Too Many Requests')) {\n        return `Too many requests. Please wait a moment and try again.`;\n    }\n    // Server errors\n    if (errorMessage.includes('500') || errorMessage.includes('502') || errorMessage.includes('503')) {\n        return `Our servers are experiencing issues. Please try again in a few moments.`;\n    }\n    // Validation errors\n    if (errorMessage.includes('invalid') || errorMessage.includes('validation')) {\n        return `The data format is incorrect. Please refresh the page and try again.`;\n    }\n    // Generic error with context\n    return `An error occurred while ${context}. Please try again. If the problem persists, contact support.`;\n}\n/**\n * Validate and transform station data with comprehensive error handling\n * @param {*} rawStation - Raw station data from API\n * @param {number} index - Station index\n * @returns {{valid: boolean, station: object|null, errors: string[]}}\n */ function validateAndTransformStation(rawStation, index) {\n    const validation = validateStation(rawStation, index);\n    if (!validation.valid) {\n        console.warn(`⚠️ Invalid station at index ${index}:`, validation.errors);\n        return {\n            valid: false,\n            station: null,\n            errors: validation.errors\n        };\n    }\n    // Transform validated data\n    const transformed = {\n        id: validation.data.id,\n        name: validation.data.name,\n        lat: validation.data.lat,\n        lng: validation.data.lng,\n        address: validation.data.address || `${validation.data.city || 'Melbourne'}, VIC`,\n        city: validation.data.city || 'Melbourne',\n        region: validation.data.region,\n        postalCode: validation.data.postalCode,\n        country: validation.data.country,\n        category: validation.data.category,\n        locationDetails: validation.data.locationDetails,\n        fuelPrices: validation.data.fuelPrices,\n        brand: validation.data.brand || 'Unknown',\n        // Generate realistic prices for demo - TODO: Get from linked Fuel Prices table\n        prices: {\n            unleaded: 180 + Math.random() * 20,\n            premium: 190 + Math.random() * 20,\n            premium98: 200 + Math.random() * 25,\n            diesel: 175 + Math.random() * 20,\n            gas: 85 + Math.random() * 15\n        },\n        source: 'baserow',\n        lastUpdated: new Date().toISOString()\n    };\n    return {\n        valid: true,\n        station: transformed,\n        errors: []\n    };\n}\nconst validationUtils = {\n    validateStation,\n    validateStations,\n    validateAPIResponse,\n    getUserFriendlyError,\n    validateAndTransformStation\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validationUtils);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/utils/validation.js\n");

/***/ })

};
;
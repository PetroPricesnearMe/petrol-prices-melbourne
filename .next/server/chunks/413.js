"use strict";exports.id=413,exports.ids=[413],exports.modules={49:(a,b,c)=>{c.d(b,{$u:()=>f,WR:()=>d,t_:()=>e});let d={NORTHERN:{id:"northern",name:"Northern Suburbs",color:"#7B68B6",icon:"\uD83C\uDF06",description:"Preston, Coburg, Essendon, Tullamarine, Sunbury",suburbs:["Preston","Coburg","Brunswick","Essendon","Airport West","Tullamarine","Sunbury","Keilor","Niddrie","Strathmore","Moonee Ponds","Ascot Vale","Flemington","Kensington","Glenroy","Oak Park","Pascoe Vale","Brunswick West","Reservoir","Thornbury","Northcote","Fairfield","Ivanhoe"],bounds:{latMin:-37.75,latMax:-37.6,lngMin:144.85,lngMax:145.05}},WESTERN:{id:"western",name:"Western Suburbs",color:"#FF6B6B",icon:"\uD83C\uDF05",description:"Footscray, Sunshine, Werribee, Point Cook",suburbs:["Footscray","Sunshine","Werribee","Point Cook","Altona","Williamstown","Newport","Yarraville","Seddon","Hoppers Crossing","Tarneit","Truganina","Caroline Springs","Deer Park","St Albans","Melton","Laverton"],bounds:{latMin:-37.95,latMax:-37.7,lngMin:144.7,lngMax:144.85}},EASTERN:{id:"eastern",name:"Eastern Suburbs",color:"#4ECDC4",icon:"\uD83C\uDFDEÔ∏è",description:"Doncaster, Box Hill, Ringwood, Glen Waverley",suburbs:["Doncaster","Box Hill","Ringwood","Templestowe","Bulleen","Balwyn","Kew","Camberwell","Hawthorn","Surrey Hills","Blackburn","Mitcham","Nunawading","Vermont","Forest Hill","Croydon","Lilydale","Chirnside Park","Glen Waverley","Mount Waverley","Wheelers Hill","Burwood"],bounds:{latMin:-37.92,latMax:-37.7,lngMin:145.05,lngMax:145.3}},MELBOURNE_INNER:{id:"melbourne_inner",name:"Melbourne Inner",color:"#FFD93D",icon:"\uD83C\uDFD9Ô∏è",description:"CBD, Carlton, Fitzroy, South Yarra, Richmond",suburbs:["Melbourne","CBD","Carlton","Fitzroy","Collingwood","Richmond","South Yarra","Prahran","St Kilda","Port Melbourne","South Melbourne","Albert Park","Middle Park","Parkville","North Melbourne","Southbank","Docklands","East Melbourne","Jolimont","Cremorne","Abbotsford"],bounds:{latMin:-37.87,latMax:-37.78,lngMin:144.93,lngMax:145.05}},SOUTH_EASTERN:{id:"south_eastern",name:"South Eastern Suburbs",color:"#6BCB77",icon:"\uD83C\uDF33",description:"Frankston, Dandenong, Cranbourne, Clayton",suburbs:["Frankston","Dandenong","Cranbourne","Mordialloc","Chelsea","Carrum","Seaford","Mentone","Parkdale","Cheltenham","Springvale","Noble Park","Keysborough","Hampton Park","Narre Warren","Berwick","Pakenham","Endeavour Hills","Hallam","Lyndhurst","Lynbrook","Clayton","Oakleigh","Malvern","Caulfield","Carnegie","Murrumbeena","Hughesdale","Bentleigh"],bounds:{latMin:-38.2,latMax:-37.82,lngMin:145,lngMax:145.3}}},e=(a,b,c)=>{if(c){let a=c.toLowerCase();for(let b of Object.values(d))if(b.suburbs.some(b=>a.includes(b.toLowerCase())))return b}for(let c of Object.values(d))if(a>=c.bounds.latMin&&a<=c.bounds.latMax&&b>=c.bounds.lngMin&&b<=c.bounds.lngMax)return c;return d.MELBOURNE_INNER},f=a=>{let b={};return Object.keys(d).forEach(a=>{b[a]=0}),a.forEach(a=>{let c=e(a.lat||a.Latitude,a.lng||a.Longitude,a.city||a.City||a.suburb);if(c&&c.id){let a=c.id.toUpperCase();b.hasOwnProperty(a)&&b[a]++}}),b}},268:(a,b,c)=>{let d;c.d(b,{U1:()=>k,fG:()=>i});var e=c(9021),f=c.n(e),g=c(3873),h=c.n(g);try{let{baserowServerService:a}=c(826);d=a}catch(a){console.warn("‚ö†Ô∏è BaserowServerService not available, will use GeoJSON only")}async function i(){try{console.log("\uD83D\uDDFAÔ∏è [Server] Loading stations from GeoJSON...");let a=h().join(process.cwd(),"public","data","stations.geojson"),b=f().readFileSync(a,"utf8"),c=JSON.parse(b);if(!c.features||!Array.isArray(c.features))throw Error("Invalid GeoJSON format");let d=c.features.map((a,b)=>{let c=a.properties||{},d=a.geometry?.coordinates||[0,0],e=c.station_owner||"",f=e;return e.includes("7-ELEVEN")||e.includes("7 ELEVEN")?f="7-Eleven":e.includes("BP")?f="BP":e.includes("SHELL")?f="Shell":e.includes("CALTEX")?f="Caltex":e.includes("AMPOL")?f="Ampol":e.includes("MOBIL")?f="Mobil":e.includes("UNITED")&&(f="United"),{id:c.objectid||b+1,name:c.station_name||"Unknown Station",address:c.station_address||c.gnaf_formatted_address||"",city:c.station_suburb||c.gnaf_suburb||"",postalCode:c.station_postcode||c.gnaf_postcode||"",state:c.station_state||"VIC",brand:f,latitude:d[1],longitude:d[0],lat:d[1],lng:d[0],prices:function(a){let b={BP:{base:1.95,variance:.05},Shell:{base:1.93,variance:.05},Caltex:{base:1.94,variance:.05},Ampol:{base:1.92,variance:.05},"7-Eleven":{base:1.89,variance:.05},Mobil:{base:1.96,variance:.05},United:{base:1.88,variance:.05},default:{base:1.94,variance:.08}},c=b[a]||b.default,d=c.base+(Math.random()-.5)*c.variance*2;return{unleaded:parseFloat(d.toFixed(2)),premium:parseFloat((d+.15).toFixed(2)),diesel:parseFloat((d-.03).toFixed(2)),e10:parseFloat((d-.05).toFixed(2)),lastUpdated:new Date().toISOString()}}(f),lastUpdated:c.station_revised_date||new Date().toISOString()}});return console.log(`‚úÖ [Server] Loaded ${d.length} stations from GeoJSON`),d}catch(a){return console.error("‚ùå [Server] Error loading stations:",a),[]}}async function j(){if(!d)return console.warn("‚ö†Ô∏è [Server] Baserow service not available, falling back to GeoJSON"),await i();try{console.log("\uD83D\uDD04 [Server] Loading stations from Baserow...");let a=await d.fetchStationsWithPrices();if(!a||0===a.length)return console.warn("‚ö†Ô∏è [Server] No stations from Baserow, falling back to GeoJSON"),await i();return console.log(`‚úÖ [Server] Loaded ${a.length} stations from Baserow`),a}catch(a){return console.error("‚ùå [Server] Error loading from Baserow, falling back to GeoJSON:",a.message),await i()}}async function k(){return await j()}},826:(a,b,c)=>{let d=c(5035),e={baserow:{apiUrl:process.env.REACT_APP_BASEROW_API_URL||"https://api.baserow.io/api",token:process.env.REACT_APP_BASEROW_TOKEN||"G2bhijqxqtg0O05dc176fwDpaUPDSIgj",publicToken:process.env.REACT_APP_BASEROW_PUBLIC_TOKEN||"MIhg-ye0C_K99qvwTzoH6MCvTMAHLbwHR0C4aZKP674"},tables:{petrolStations:{id:623329},fuelPrices:{id:623330}}};class f{constructor(){this.baseUrl=e.baserow.apiUrl,this.token=e.baserow.token,this.publicToken=e.baserow.publicToken,this.stationsTableId=e.tables.petrolStations.id,this.pricesTableId=e.tables.fuelPrices.id}async fetchWithRetry(a,b={},c=3){let e;for(let f=0;f<c;f++)try{let c=await d(a,{...b,timeout:15e3});if(429===c.status){let a=c.headers.get("Retry-After"),b=a?1e3*parseInt(a):1e3*Math.pow(2,f);console.warn(`‚ö†Ô∏è [Baserow] Rate limited. Waiting ${b/1e3}s...`),await new Promise(a=>setTimeout(a,b));continue}if(!c.ok)throw Error(`HTTP ${c.status}: ${c.statusText}`);return await c.json()}catch(b){if(e=b,f===c-1)throw console.error(`‚ùå [Baserow] Request failed after ${c} attempts:`,b.message),e;let a=1e3*Math.pow(2,f);console.log(`‚è≥ [Baserow] Retrying in ${a/1e3}s... (attempt ${f+1}/${c})`),await new Promise(b=>setTimeout(b,a))}throw e}async fetchAllRows(a,b=!0){let c=[],d=1,e=b?`${this.baseUrl}/database/rows/table/${a}/?user_field_names=true&size=200&public_token=${this.publicToken}`:`${this.baseUrl}/database/rows/table/${a}/?user_field_names=true&size=200`,f={"Content-Type":"application/json",Accept:"application/json"};b||(f.Authorization=`Token ${this.token}`);try{for(;e;){console.log(`üì° [Baserow] Fetching page ${d} from table ${a}...`);let g=await this.fetchWithRetry(e,{method:"GET",headers:f});if(!g.results||!Array.isArray(g.results))throw Error("Invalid API response structure");c.push(...g.results),console.log(`‚úì Page ${d}: ${g.results.length} rows (total: ${c.length})`),(e=g.next)&&b&&!e.includes("public_token")&&(e+=`&public_token=${this.publicToken}`),d++}return console.log(`‚úÖ [Baserow] Fetched ${c.length} total rows from table ${a}`),c}catch(b){throw console.error(`‚ùå [Baserow] Error fetching rows from table ${a}:`,b.message),b}}async fetchStations(){try{console.log("\uD83C\uDFE2 [Baserow] Fetching petrol stations...");let a=(await this.fetchAllRows(this.stationsTableId,!0)).map(a=>this.normalizeStation(a));return console.log(`‚úÖ [Baserow] Normalized ${a.length} stations`),a}catch(a){throw console.error("‚ùå [Baserow] Error fetching stations:",a.message),a}}async fetchFuelPrices(){try{console.log("‚õΩ [Baserow] Fetching fuel prices...");let a=(await this.fetchAllRows(this.pricesTableId,!0)).map(a=>this.normalizeFuelPrice(a));return console.log(`‚úÖ [Baserow] Normalized ${a.length} fuel prices`),a}catch(a){throw console.error("‚ùå [Baserow] Error fetching fuel prices:",a.message),a}}async fetchStationsWithPrices(){try{console.log("\uD83D\uDD04 [Baserow] Fetching stations with prices...");let[a,b]=await Promise.all([this.fetchStations(),this.fetchFuelPrices()]),c=this.groupPricesByStation(b),d=a.map(a=>({...a,fuelPrices:c[a.id]||[],prices:this.formatPricesObject(c[a.id]||[])}));return console.log(`‚úÖ [Baserow] Merged ${d.length} stations with prices`),d}catch(a){throw console.error("‚ùå [Baserow] Error fetching stations with prices:",a.message),a}}normalizeStation(a){return{id:a.id,name:a["Station Name"]||"Unknown Station",address:a.Address||"",city:a.City||"",postalCode:a["Postal Code"]||"",state:a.Region||"VIC",country:a.Country||"AUSTRALIA",latitude:parseFloat(a.Latitude)||0,longitude:parseFloat(a.Longitude)||0,lat:parseFloat(a.Latitude)||0,lng:parseFloat(a.Longitude)||0,locationDetails:a["Location Details"]||"",category:a.Category||"",brand:Array.isArray(a.brand)?a.brand.join(", "):a.brand||"",fuelPriceIds:Array.isArray(a["Fuel Prices"])?a["Fuel Prices"]:[]}}normalizeFuelPrice(a){let b=a["Fuel Type"],c=a["Price Trend"];return{id:a.id,stationIds:Array.isArray(a["Petrol Station"])?a["Petrol Station"]:[],fuelType:({3812408:"unleaded",3812409:"premium",3812410:"diesel",3812411:"lpg",3812412:"unleaded95"})[b]||"unknown",fuelTypeId:b,price:parseFloat(a["Price Per Liter"])||0,pricePerLiter:parseFloat(a["Price Per Liter"])||0,priceSource:a["Price Source"]||"",priceTrend:({3812413:"increasing",3812414:"stable",3812415:"decreasing"})[c]||"stable",lastUpdated:a["Last Updated"]||new Date().toISOString(),locations:a.Locations||""}}groupPricesByStation(a){let b={};return a.forEach(a=>{a.stationIds.forEach(c=>{b[c]||(b[c]=[]),b[c].push({fuelType:a.fuelType,price:a.price,trend:a.priceTrend,lastUpdated:a.lastUpdated})})}),b}formatPricesObject(a){let b={};return a.forEach(a=>{b[a.fuelType]=a.price}),b}}a.exports={baserowServerService:new f,BaserowServerService:f}},3138:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.d(b,{Io:()=>j,Q$:()=>l,Uu:()=>g,cm:()=>k,rL:()=>i,sF:()=>h});var e=c(3220),f=a([e]);let g=(e=(f.then?(await f)():f)[0]).motion.div,h=e.motion.h1,i=e.motion.p,j=e.motion.section;e.motion.article;let k={hidden:{opacity:0},visible:{opacity:1,transition:{duration:.6,staggerChildren:.1}}},l={hidden:{opacity:0,y:20},visible:{opacity:1,y:0,transition:{duration:.6}}};d()}catch(a){d(a)}})}};
"use strict";(()=>{var a={};a.id=456,a.ids=[456],a.modules={5600:a=>{a.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6472:a=>{a.exports=require("@opentelemetry/api")},7101:(a,b,c)=>{c.r(b),c.d(b,{config:()=>r,default:()=>q,handler:()=>t});var d={};c.r(d),c.d(d,{default:()=>n});var e=c(9046),f=c(8667),g=c(3480),h=c(6435);let i=require("fs");var j=c.n(i);let k=require("path");var l=c.n(k);async function m(){try{console.log("\uD83D\uDDFA️ [Server] Loading stations from GeoJSON...");let a=l().join(process.cwd(),"public","data","stations.geojson"),b=j().readFileSync(a,"utf8"),c=JSON.parse(b);if(!c.features||!Array.isArray(c.features))throw Error("Invalid GeoJSON format");let d=c.features.map((a,b)=>{let c=a.properties||{},d=a.geometry?.coordinates||[0,0],e=c.station_owner||"",f=e;return e.includes("7-ELEVEN")||e.includes("7 ELEVEN")?f="7-Eleven":e.includes("BP")?f="BP":e.includes("SHELL")?f="Shell":e.includes("CALTEX")?f="Caltex":e.includes("AMPOL")?f="Ampol":e.includes("MOBIL")?f="Mobil":e.includes("UNITED")&&(f="United"),{id:c.objectid||b+1,name:c.station_name||"Unknown Station",address:c.station_address||c.gnaf_formatted_address||"",city:c.station_suburb||c.gnaf_suburb||"",postalCode:c.station_postcode||c.gnaf_postcode||"",state:c.station_state||"VIC",brand:f,latitude:d[1],longitude:d[0],lat:d[1],lng:d[0],prices:function(a){let b={BP:{base:1.95,variance:.05},Shell:{base:1.93,variance:.05},Caltex:{base:1.94,variance:.05},Ampol:{base:1.92,variance:.05},"7-Eleven":{base:1.89,variance:.05},Mobil:{base:1.96,variance:.05},United:{base:1.88,variance:.05},default:{base:1.94,variance:.08}},c=b[a]||b.default,d=c.base+(Math.random()-.5)*c.variance*2;return{unleaded:parseFloat(d.toFixed(2)),premium:parseFloat((d+.15).toFixed(2)),diesel:parseFloat((d-.03).toFixed(2)),e10:parseFloat((d-.05).toFixed(2)),lastUpdated:new Date().toISOString()}}(f),lastUpdated:c.station_revised_date||new Date().toISOString()}});return console.log(`✅ [Server] Loaded ${d.length} stations from GeoJSON`),d}catch(a){return console.error("❌ [Server] Error loading stations:",a),[]}}async function n(a,b){if("GET"!==a.method)return b.status(405).json({error:"Method not allowed"});try{console.log("\uD83D\uDCE1 [API] /api/stations called");let a=(await m()).map(a=>({...a,fuelPrices:a.prices?Object.entries(a.prices).map(([a,b])=>({fuelType:a,price:parseFloat(b||0)})):[]}));b.setHeader("Cache-Control","public, s-maxage=3600, stale-while-revalidate=86400"),b.status(200).json({success:!0,data:a,count:a.length,timestamp:new Date().toISOString()})}catch(a){console.error("❌ [API] Error fetching stations:",a),b.status(500).json({success:!1,error:"Failed to fetch stations",message:a.message})}}var o=c(8112),p=c(8766);let q=(0,h.M)(d,"default"),r=(0,h.M)(d,"config"),s=new g.PagesAPIRouteModule({definition:{kind:f.A.PAGES_API,page:"/api/stations",pathname:"/api/stations",bundlePath:"",filename:""},userland:d,distDir:".next",relativeProjectDir:""});async function t(a,b,c){let d=await s.prepare(a,b,{srcPage:"/api/stations"});if(!d){b.statusCode=400,b.end("Bad Request"),null==c.waitUntil||c.waitUntil.call(c,Promise.resolve());return}let{query:f,params:g,prerenderManifest:h,routerServerContext:i}=d;try{let c=a.method||"GET",d=(0,o.getTracer)(),e=d.getActiveScopeSpan(),j=s.instrumentationOnRequestError.bind(s),k=async e=>s.render(a,b,{query:{...f,...g},params:g,allowedRevalidateHeaderKeys:[],multiZoneDraftMode:!1,trustHostHeader:!1,previewProps:h.preview,propagateError:!1,dev:s.isDev,page:"/api/stations",internalRevalidate:null==i?void 0:i.revalidate,onError:(...b)=>j(a,...b)}).finally(()=>{if(!e)return;e.setAttributes({"http.status_code":b.statusCode,"next.rsc":!1});let f=d.getRootSpanAttributes();if(!f)return;if(f.get("next.span_type")!==p.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${f.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let g=f.get("next.route");if(g){let a=`${c} ${g}`;e.setAttributes({"next.route":g,"http.route":g,"next.span_name":a}),e.updateName(a)}else e.updateName(`${c} ${a.url}`)});e?await k(e):await d.withPropagatedContext(a.headers,()=>d.trace(p.BaseServerSpan.handleRequest,{spanName:`${c} ${a.url}`,kind:o.SpanKind.SERVER,attributes:{"http.method":c,"http.target":a.url}},k))}catch(a){if(s.isDev)throw a;(0,e.sendError)(b,500,"Internal Server Error")}finally{null==c.waitUntil||c.waitUntil.call(c,Promise.resolve())}}}};var b=require("../../webpack-api-runtime.js");b.C(a);var c=b.X(0,[169],()=>b(b.s=7101));module.exports=c})();
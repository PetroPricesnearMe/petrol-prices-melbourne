"use strict";(()=>{var a={};a.id=456,a.ids=[456],a.modules={1326:(a,b,c)=>{let d=c(5035),e={baserow:{apiUrl:process.env.REACT_APP_BASEROW_API_URL||"https://api.baserow.io/api",token:process.env.REACT_APP_BASEROW_TOKEN||"G2bhijqxqtg0O05dc176fwDpaUPDSIgj",publicToken:process.env.REACT_APP_BASEROW_PUBLIC_TOKEN||"MIhg-ye0C_K99qvwTzoH6MCvTMAHLbwHR0C4aZKP674"},tables:{petrolStations:{id:623329},fuelPrices:{id:623330}}};class f{constructor(){this.baseUrl=e.baserow.apiUrl,this.token=e.baserow.token,this.publicToken=e.baserow.publicToken,this.stationsTableId=e.tables.petrolStations.id,this.pricesTableId=e.tables.fuelPrices.id}async fetchWithRetry(a,b={},c=3){let e;for(let f=0;f<c;f++)try{let c=await d(a,{...b,timeout:15e3});if(429===c.status){let a=c.headers.get("Retry-After"),b=a?1e3*parseInt(a):1e3*Math.pow(2,f);console.warn(`⚠️ [Baserow] Rate limited. Waiting ${b/1e3}s...`),await new Promise(a=>setTimeout(a,b));continue}if(!c.ok)throw Error(`HTTP ${c.status}: ${c.statusText}`);return await c.json()}catch(b){if(e=b,f===c-1)throw console.error(`❌ [Baserow] Request failed after ${c} attempts:`,b.message),e;let a=1e3*Math.pow(2,f);console.log(`⏳ [Baserow] Retrying in ${a/1e3}s... (attempt ${f+1}/${c})`),await new Promise(b=>setTimeout(b,a))}throw e}async fetchAllRows(a,b=!0){let c=[],d=1,e=b?`${this.baseUrl}/database/rows/table/${a}/?user_field_names=true&size=200&public_token=${this.publicToken}`:`${this.baseUrl}/database/rows/table/${a}/?user_field_names=true&size=200`,f={"Content-Type":"application/json",Accept:"application/json"};b||(f.Authorization=`Token ${this.token}`);try{for(;e;){console.log(`📡 [Baserow] Fetching page ${d} from table ${a}...`);let g=await this.fetchWithRetry(e,{method:"GET",headers:f});if(!g.results||!Array.isArray(g.results))throw Error("Invalid API response structure");c.push(...g.results),console.log(`✓ Page ${d}: ${g.results.length} rows (total: ${c.length})`),(e=g.next)&&b&&!e.includes("public_token")&&(e+=`&public_token=${this.publicToken}`),d++}return console.log(`✅ [Baserow] Fetched ${c.length} total rows from table ${a}`),c}catch(b){throw console.error(`❌ [Baserow] Error fetching rows from table ${a}:`,b.message),b}}async fetchStations(){try{console.log("\uD83C\uDFE2 [Baserow] Fetching petrol stations...");let a=(await this.fetchAllRows(this.stationsTableId,!0)).map(a=>this.normalizeStation(a));return console.log(`✅ [Baserow] Normalized ${a.length} stations`),a}catch(a){throw console.error("❌ [Baserow] Error fetching stations:",a.message),a}}async fetchFuelPrices(){try{console.log("⛽ [Baserow] Fetching fuel prices...");let a=(await this.fetchAllRows(this.pricesTableId,!0)).map(a=>this.normalizeFuelPrice(a));return console.log(`✅ [Baserow] Normalized ${a.length} fuel prices`),a}catch(a){throw console.error("❌ [Baserow] Error fetching fuel prices:",a.message),a}}async fetchStationsWithPrices(){try{console.log("\uD83D\uDD04 [Baserow] Fetching stations with prices...");let[a,b]=await Promise.all([this.fetchStations(),this.fetchFuelPrices()]),c=this.groupPricesByStation(b),d=a.map(a=>({...a,fuelPrices:c[a.id]||[],prices:this.formatPricesObject(c[a.id]||[])}));return console.log(`✅ [Baserow] Merged ${d.length} stations with prices`),d}catch(a){throw console.error("❌ [Baserow] Error fetching stations with prices:",a.message),a}}normalizeStation(a){return{id:a.id,name:a["Station Name"]||"Unknown Station",address:a.Address||"",city:a.City||"",postalCode:a["Postal Code"]||"",state:a.Region||"VIC",country:a.Country||"AUSTRALIA",latitude:parseFloat(a.Latitude)||0,longitude:parseFloat(a.Longitude)||0,lat:parseFloat(a.Latitude)||0,lng:parseFloat(a.Longitude)||0,locationDetails:a["Location Details"]||"",category:a.Category||"",brand:Array.isArray(a.brand)?a.brand.join(", "):a.brand||"",fuelPriceIds:Array.isArray(a["Fuel Prices"])?a["Fuel Prices"]:[]}}normalizeFuelPrice(a){let b=a["Fuel Type"],c=a["Price Trend"];return{id:a.id,stationIds:Array.isArray(a["Petrol Station"])?a["Petrol Station"]:[],fuelType:({3812408:"unleaded",3812409:"premium",3812410:"diesel",3812411:"lpg",3812412:"unleaded95"})[b]||"unknown",fuelTypeId:b,price:parseFloat(a["Price Per Liter"])||0,pricePerLiter:parseFloat(a["Price Per Liter"])||0,priceSource:a["Price Source"]||"",priceTrend:({3812413:"increasing",3812414:"stable",3812415:"decreasing"})[c]||"stable",lastUpdated:a["Last Updated"]||new Date().toISOString(),locations:a.Locations||""}}groupPricesByStation(a){let b={};return a.forEach(a=>{a.stationIds.forEach(c=>{b[c]||(b[c]=[]),b[c].push({fuelType:a.fuelType,price:a.price,trend:a.priceTrend,lastUpdated:a.lastUpdated})})}),b}formatPricesObject(a){let b={};return a.forEach(a=>{b[a.fuelType]=a.price}),b}}a.exports={baserowServerService:new f,BaserowServerService:f}},3873:a=>{a.exports=require("path")},5035:a=>{a.exports=import("node-fetch")},5600:a=>{a.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6472:a=>{a.exports=require("@opentelemetry/api")},9021:a=>{a.exports=require("fs")},9238:(a,b,c)=>{c.r(b),c.d(b,{config:()=>s,default:()=>r,handler:()=>u});var d={};c.r(d),c.d(d,{default:()=>o});var e=c(9046),f=c(8667),g=c(3480),h=c(6435),i=c(1326),j=c(9021),k=c.n(j),l=c(3873),m=c.n(l);try{let{baserowServerService:a}=c(1326)}catch(a){console.warn("⚠️ BaserowServerService not available, will use GeoJSON only")}async function n(){try{console.log("\uD83D\uDDFA️ [Server] Loading stations from GeoJSON...");let a=m().join(process.cwd(),"public","data","stations.geojson"),b=k().readFileSync(a,"utf8"),c=JSON.parse(b);if(!c.features||!Array.isArray(c.features))throw Error("Invalid GeoJSON format");let d=c.features.map((a,b)=>{let c=a.properties||{},d=a.geometry?.coordinates||[0,0],e=c.station_owner||"",f=e;return e.includes("7-ELEVEN")||e.includes("7 ELEVEN")?f="7-Eleven":e.includes("BP")?f="BP":e.includes("SHELL")?f="Shell":e.includes("CALTEX")?f="Caltex":e.includes("AMPOL")?f="Ampol":e.includes("MOBIL")?f="Mobil":e.includes("UNITED")&&(f="United"),{id:c.objectid||b+1,name:c.station_name||"Unknown Station",address:c.station_address||c.gnaf_formatted_address||"",city:c.station_suburb||c.gnaf_suburb||"",postalCode:c.station_postcode||c.gnaf_postcode||"",state:c.station_state||"VIC",brand:f,latitude:d[1],longitude:d[0],lat:d[1],lng:d[0],prices:function(a){let b={BP:{base:1.95,variance:.05},Shell:{base:1.93,variance:.05},Caltex:{base:1.94,variance:.05},Ampol:{base:1.92,variance:.05},"7-Eleven":{base:1.89,variance:.05},Mobil:{base:1.96,variance:.05},United:{base:1.88,variance:.05},default:{base:1.94,variance:.08}},c=b[a]||b.default,d=c.base+(Math.random()-.5)*c.variance*2;return{unleaded:parseFloat(d.toFixed(2)),premium:parseFloat((d+.15).toFixed(2)),diesel:parseFloat((d-.03).toFixed(2)),e10:parseFloat((d-.05).toFixed(2)),lastUpdated:new Date().toISOString()}}(f),lastUpdated:c.station_revised_date||new Date().toISOString()}});return console.log(`✅ [Server] Loaded ${d.length} stations from GeoJSON`),d}catch(a){return console.error("❌ [Server] Error loading stations:",a),[]}}async function o(a,b){if("GET"!==a.method)return b.status(405).json({error:"Method not allowed"});try{let a;console.log("\uD83D\uDCE1 [API] /api/stations called");let c="baserow";try{if(console.log("\uD83D\uDD04 [API] Attempting to fetch from Baserow..."),!(a=await i.baserowServerService.fetchStationsWithPrices())||0===a.length)throw Error("No stations returned from Baserow");console.log(`✅ [API] Successfully fetched ${a.length} stations from Baserow`)}catch(b){console.warn("⚠️ [API] Baserow fetch failed, falling back to GeoJSON:",b.message),a=await n(),c="geojson-fallback"}let d=a.map(a=>({...a,fuelPrices:a.fuelPrices||(a.prices?Object.entries(a.prices).map(([a,b])=>({fuelType:a,price:parseFloat(b||0)})):[])})),e="baserow"===c?900:3600;b.setHeader("Cache-Control",`public, s-maxage=${e}, stale-while-revalidate=86400`),b.status(200).json({success:!0,data:d,count:d.length,source:c,timestamp:new Date().toISOString()})}catch(a){console.error("❌ [API] Error fetching stations:",a),b.status(500).json({success:!1,error:"Failed to fetch stations",message:a.message,timestamp:new Date().toISOString()})}}var p=c(8112),q=c(8766);let r=(0,h.M)(d,"default"),s=(0,h.M)(d,"config"),t=new g.PagesAPIRouteModule({definition:{kind:f.A.PAGES_API,page:"/api/stations",pathname:"/api/stations",bundlePath:"",filename:""},userland:d,distDir:".next",relativeProjectDir:""});async function u(a,b,c){let d=await t.prepare(a,b,{srcPage:"/api/stations"});if(!d){b.statusCode=400,b.end("Bad Request"),null==c.waitUntil||c.waitUntil.call(c,Promise.resolve());return}let{query:f,params:g,prerenderManifest:h,routerServerContext:i}=d;try{let c=a.method||"GET",d=(0,p.getTracer)(),e=d.getActiveScopeSpan(),j=t.instrumentationOnRequestError.bind(t),k=async e=>t.render(a,b,{query:{...f,...g},params:g,allowedRevalidateHeaderKeys:[],multiZoneDraftMode:!1,trustHostHeader:!1,previewProps:h.preview,propagateError:!1,dev:t.isDev,page:"/api/stations",internalRevalidate:null==i?void 0:i.revalidate,onError:(...b)=>j(a,...b)}).finally(()=>{if(!e)return;e.setAttributes({"http.status_code":b.statusCode,"next.rsc":!1});let f=d.getRootSpanAttributes();if(!f)return;if(f.get("next.span_type")!==q.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${f.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let g=f.get("next.route");if(g){let a=`${c} ${g}`;e.setAttributes({"next.route":g,"http.route":g,"next.span_name":a}),e.updateName(a)}else e.updateName(`${c} ${a.url}`)});e?await k(e):await d.withPropagatedContext(a.headers,()=>d.trace(q.BaseServerSpan.handleRequest,{spanName:`${c} ${a.url}`,kind:p.SpanKind.SERVER,attributes:{"http.method":c,"http.target":a.url}},k))}catch(a){if(t.isDev)throw a;(0,e.sendError)(b,500,"Internal Server Error")}finally{null==c.waitUntil||c.waitUntil.call(c,Promise.resolve())}}}};var b=require("../../webpack-api-runtime.js");b.C(a);var c=b.X(0,[169],()=>b(b.s=9238));module.exports=c})();
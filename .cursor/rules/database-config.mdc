---
description: Agent for database configuration, data models, and environment setup
globs:
  - config/**
  - data/**
  - env.example
  - .env.*
  - backend/src/config/**
  - backend/src/types/**
  - scripts/database/**
  - scripts/migration/**
alwaysApply: false
---

# Database/Config Domain Rules
## Melbourne Petrol Stations - Database & Configuration Agent

### 🎯 Agent Scope & Responsibilities

You are the **Database/Config Domain Agent** for the Melbourne Petrol Stations project. Your primary responsibility is managing all database configurations, data models, environment variables, and system configuration.

- Only modify files within allowed globs
- Focus on database schemas, configuration management, and data integrity
- Do not alter frontend components, API logic, or deployment pipelines
- Coordinate with Backend Agent for schema changes

---

## 🗄️ **Core Responsibilities**

### **1. Database Configuration**
- Manage Baserow API configurations and connections
- Define data schemas and validation rules
- Handle database migrations and versioning
- Optimize database performance and indexing
- Manage data backup and recovery strategies

### **2. Environment Management**
- Configure environment variables for all environments (dev, staging, prod)
- Manage sensitive configuration and secrets
- Ensure environment parity across deployments
- Document configuration requirements
- Validate environment setup

### **3. Data Models & Schemas**
- Define TypeScript interfaces for data models
- Create validation schemas for API requests
- Maintain data consistency and integrity rules
- Document data relationships and constraints
- Handle schema evolution and migrations

### **4. Configuration Management**
- Manage application configuration files
- Handle feature flags and environment-specific settings
- Configure external service integrations
- Manage logging and monitoring configurations
- Handle security and CORS configurations

---

## 🛠️ **Technical Guidelines**

### **Environment Configuration:**
```bash
# ✅ .env.example template
# Database Configuration
BASEROW_API_URL=https://api.baserow.io
BASEROW_API_TOKEN=your_token_here
BASEROW_DATABASE_ID=your_database_id

# Server Configuration
PORT=3001
NODE_ENV=development
API_BASE_URL=http://localhost:3001

# External Services
MAPBOX_ACCESS_TOKEN=your_mapbox_token
REDIS_URL=redis://localhost:6379

# Security
JWT_SECRET=your_jwt_secret
CORS_ORIGIN=http://localhost:3000
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Monitoring
SENTRY_DSN=your_sentry_dsn
LOG_LEVEL=info
```

### **Data Model Definitions:**
```typescript
// ✅ Station data model
export interface Station {
  id: string;
  name: string;
  brand: string;
  address: string;
  suburb: string;
  postcode: string;
  latitude: number;
  longitude: number;
  amenities: string[];
  operatingHours: OperatingHours;
  contactInfo: ContactInfo;
  createdAt: Date;
  updatedAt: Date;
}

export interface FuelPrice {
  id: string;
  stationId: string;
  fuelType: FuelType;
  pricePerLitre: number;
  lastUpdated: Date;
  source: string;
  trend: 'increasing' | 'stable' | 'decreasing';
}
```

### **Validation Schemas:**
```typescript
// ✅ Request validation schemas
export const CreateStationSchema = {
  type: 'object',
  required: ['name', 'address', 'latitude', 'longitude'],
  properties: {
    name: { type: 'string', minLength: 2, maxLength: 100 },
    address: { type: 'string', minLength: 5, maxLength: 200 },
    latitude: { type: 'number', minimum: -90, maximum: 90 },
    longitude: { type: 'number', minimum: -180, maximum: 180 }
  }
};
```

---

## 🔧 **Configuration Standards**

### **Database Configuration:**
```typescript
// ✅ Database config structure
export const databaseConfig = {
  baserow: {
    apiUrl: process.env.BASEROW_API_URL,
    apiToken: process.env.BASEROW_API_TOKEN,
    databaseId: process.env.BASEROW_DATABASE_ID,
    timeout: 30000,
    retries: 3
  },
  cache: {
    redis: {
      url: process.env.REDIS_URL,
      ttl: 300, // 5 minutes default
      maxMemory: '100mb'
    }
  }
};
```

### **Security Configuration:**
```typescript
// ✅ Security settings
export const securityConfig = {
  cors: {
    origin: process.env.CORS_ORIGIN?.split(',') || ['http://localhost:3000'],
    credentials: true,
    optionsSuccessStatus: 200
  },
  rateLimit: {
    windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000'),
    max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '100'),
    standardHeaders: true,
    legacyHeaders: false
  }
};
```

---

## 📋 **Data Management Guidelines**

### **Migration Scripts:**
```javascript
// ✅ Migration example
module.exports = {
  up: async (baserowClient) => {
    // Add new field to stations table
    await baserowClient.createField('stations', {
      name: 'operating_hours',
      type: 'long_text'
    });
  },
  
  down: async (baserowClient) => {
    // Rollback changes
    await baserowClient.deleteField('stations', 'operating_hours');
  }
};
```

### **Seed Data:**
```json
{
  "stations": [
    {
      "name": "Shell Coles Express",
      "brand": "Shell",
      "address": "123 Collins Street, Melbourne VIC 3000",
      "latitude": -37.8136,
      "longitude": 144.9631,
      "amenities": ["convenience_store", "car_wash", "atm"]
    }
  ]
}
```

---

## 🔄 **Collaboration Protocols**

### **With Backend Agent:**
- Coordinate database schema changes
- Share data model interfaces and types
- Align on validation rules and constraints
- Plan migration strategies together

### **With Frontend Agent:**
- Provide TypeScript interfaces for frontend use
- Coordinate API response formats
- Share validation schemas for form handling
- Align on error message formats

### **With DevOps Agent:**
- Coordinate environment variable deployment
- Plan database backup and recovery procedures
- Configure monitoring for database performance
- Set up alerts for configuration issues

---

*Remember: Always validate configurations, maintain data integrity, and coordinate schema changes with other agents.*